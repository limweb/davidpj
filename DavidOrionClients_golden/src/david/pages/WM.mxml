<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:component="component.*"
		   xmlns:components="com.shinynet.shinylib.components.*"
		   xmlns:pages="david.pages.*"
		   width="100%" height="100%">

	<fx:Script>
		<![CDATA[
			import component.PopUpCustomTitleWindow;
			
			import david.viewers.DocViewerTitleWindow;
			import david.viewers.WorkViewerTitleWindow;
			
			import event.DocViewerEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.CursorBookmark;
			import mx.collections.HierarchicalCollectionView;
			import mx.collections.ICollectionView;
			import mx.collections.IHierarchicalCollectionViewCursor;
			import mx.collections.IViewCursor;
			import mx.collections.XMLListCollection;
			import mx.controls.treeClasses.ITreeDataDescriptor;
			import mx.core.FlexGlobals;
			import mx.events.AdvancedDataGridEvent;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.ToggleButton;
			
			//############################### Variable #################################//
			
			[Bindable]
			private var DGwidth:Number = 1162;
			
			[Bindable]
			public var BatchesTree_XC:XMLListCollection;
			
			[Bindable]
			public var DocumentsTree_XC:XMLListCollection;
			
			[Bindable]
			public var TransactionsTree_XC:XMLListCollection;
			
			[Bindable]
			public var pop:PopUpCustomTitleWindow;
			
			[Bindable]
			private var xmlListTmp1:XMLListCollection = new XMLListCollection();
			
			[Bindable]
			private var xmlListTmp2:XMLListCollection = new XMLListCollection();
			
			[Bindable]
			private var xmlListTmp3:XMLListCollection = new XMLListCollection();

			//############################### Variable #################################//
			
			//############################### Set & Initial Method #####################################//
			
			public function init():void {
				BatchesTree_XC = new XMLListCollection(BatchesTreeList);
				DocumentsTree_XC = new XMLListCollection(DocumentsTreeList);
				TransactionsTree_XC = new XMLListCollection(TransactionsTreeList);
				
				BatchesTree.openItems = [];
				BatchesTree.expandChildrenOf(BatchesTree.dataProvider[0],true);
				
				DocumentsTree.openItems = [];
				DocumentsTree.expandChildrenOf(DocumentsTree.dataProvider[0],true);
				
				TransactionsTree.openItems = [];
				TransactionsTree.expandChildrenOf(TransactionsTree.dataProvider[0],true);
			}
	
//This does not work: fix it [David]
			private function OpenBatchesTreeNodes():void {
				var xList:XMLList = BatchesTreeList..folder.(hasOwnProperty("@open") && @open == "true");
				BatchesTree.openItems = xList;
			}
			
//This does not work -- fix it [David]
			private function OpenDocumentsTreeNodes():void {
				var xList:XMLList = DocumentsTreeList..folder.(hasOwnProperty("@open") && @open == "true");
				DocumentsTree.openItems = xList;
			}
			
//This does not work -- fix it [David]
			private function TransactionsTreeNodes():void {
				var xList:XMLList = TransactionsTreeList..folder.(hasOwnProperty("@open") && @open == "true");
				TransactionsTree.openItems = xList;
			}
			//############################### Set & Initial Method #####################################//
			
			private function closeFolder():void {
				var hcv:HierarchicalCollectionView = Batches_DG.dataProvider as HierarchicalCollectionView;
				Batches_DG.dataProvider.refresh();
				Batches_DG.validateNow();
				Batches_DG.invalidateDisplayList();
				for (var i:int = 0; i < Batches_DG.dataProvider.source.source.length; i++) 
				{
					if(Batches_DG.dataProvider.source.source[i].children.length > 0 ){
						
						hcv.closeNode(Batches_DG.dataProvider.source.source[i] as Object);
					}
				}
				hcv.refresh();
			}
			
			
			public function lv1Click(e:MouseEvent):void {
				var chk:Boolean = false;
				WmModule.getInstance.lv1OpenClose = !WmModule.getInstance.lv1OpenClose;
				if(WmModule.getInstance.lv1OpenClose){
					chk = setOpenNodes(2);
				} else {
					closeFolder();
				}
				
				WmModule.getInstance.level2 = chk;
				if(!chk){
					WmModule.getInstance.level3 = chk;
					WmModule.getInstance.level4 = chk;
				}
				
				if(!WmModule.getInstance.level2){
					WmModule.getInstance.lv2OpenClose = chk;
				} 
				
				trace('l1c',WmModule.getInstance.lv1OpenClose);
				trace('l2c',WmModule.getInstance.lv2OpenClose);
				trace('l3c',WmModule.getInstance.lv3OpenClose);
			}
			
			public function selectAllWmSuccess(ac:ArrayCollection):void {
				Batches_DG.dataProvider = new HierarchicalData(ac);
			}
			
			//must be in every project that use CustomADG
			public function lv2click():void {
				var chk:Boolean = false;
				if(WmModule.getInstance.level1){
					WmModule.getInstance.lv2OpenClose = !WmModule.getInstance.lv2OpenClose;
					if(WmModule.getInstance.lv2OpenClose){
						chk = setOpenNodes(3);
						WmModule.getInstance.level3 = chk;
						WmModule.getInstance.lv3OpenClose = false;
						WmModule.getInstance.lv4OpenClose = false;
						if(!chk){
							WmModule.getInstance.level4 = chk;
						}
					} else {
						chk = setOpenNodes(2);
						WmModule.getInstance.level2 = chk;
						if(!chk){
							WmModule.getInstance.level3 = chk;
							WmModule.getInstance.level4 = chk;
						} else {
							WmModule.getInstance.level3 = !chk;
							
						}
					}
				}
				
				trace('l1c',WmModule.getInstance.lv1OpenClose);
				trace('l2c',WmModule.getInstance.lv2OpenClose);
				trace('l3c',WmModule.getInstance.lv3OpenClose);		
			}
			
			public function setOpenNodes(numLevels:int = 1):Boolean
			{
				var chk:Boolean = false;
				var hcv:HierarchicalCollectionView = Batches_DG.dataProvider as HierarchicalCollectionView;
				var dataCursor:IHierarchicalCollectionViewCursor = Batches_DG.dataProvider.createCursor();
				dataCursor.seek(CursorBookmark.FIRST);
				while (!dataCursor.afterLast)
				{
					if (dataCursor.currentDepth < numLevels) {
						trace('lv=',dataCursor.currentDepth);
						if(dataCursor.current.children != null &&  dataCursor.current.children.length > 0 ){
							//							if(dataCursor.currentDepth == (numLevels -1) ){
							//								trace('true');
							//								chk = true;
							//							}
							hcv.openNode(dataCursor.current);
						}
					} else {
						
						if(dataCursor.currentDepth == numLevels ){
							if(dataCursor.current.children != null &&  dataCursor.current.children.length > 0 ){
								trace('true');
								chk = true;
							}
						}	
						hcv.closeNode(dataCursor.current);
						
					}
					dataCursor.moveNext();
				}
				
				dataCursor.seek(CursorBookmark.FIRST, verticalScrollPosition);
				hcv.refresh();
				trace('chk',chk);
				return chk;
			}
			
			public function setOpenCurrNodes(numLevels:int = 1):Boolean
			{
				var chk:Boolean = false;
				var dataCursor:IHierarchicalCollectionViewCursor = Batches_DG.dataProvider.createCursor();
				dataCursor.seek(CursorBookmark.FIRST);
				while (!dataCursor.afterLast)
				{
					trace(dataCursor.currentDepth);
					if(dataCursor.currentDepth == numLevels+1 ){
						if(dataCursor.current.children != null &&  dataCursor.current.children.length > 0 ){
							trace('true');
							chk = true;
						}
						
						if( Batches_DG.isItemOpen(dataCursor.current) ){
							trace('isopen');
						}
					}	
					dataCursor.moveNext();
				}
				
				dataCursor.seek(CursorBookmark.FIRST, verticalScrollPosition);
				trace('chk',chk);
				return chk;
			}
			
			//must be in every project that use CustomADG
			public function lv3click():void {
				//			var chk:Boolean = false;
				//			trace(WmModule.getInstance.level2);
				//				if(WmModule.getInstance.level2){
				//					trace(WmModule.getInstance.lv3OpenClose);
				//					WmModule.getInstance.lv3OpenClose = !WmModule.getInstance.lv3OpenClose;
				//					trace(WmModule.getInstance.lv3OpenClose);
				//					if(WmModule.getInstance.lv3OpenClose){
				//						chk= setOpenNodes(4);
				//						WmModule.getInstance.level4 = chk;
				//					} else {
				//						chk = setOpenNodes(3);
				//						WmModule.getInstance.level3 = chk;
				//						if(!chk){
				//							WmModule.getInstance.lv4OpenClose = chk;
				//						}
				//						
				//					}
				//				}
				//				trace('l1c',WmModule.getInstance.lv1OpenClose);
				//				trace('l2c',WmModule.getInstance.lv2OpenClose);
				//				trace('l3c',WmModule.getInstance.lv3OpenClose);
				
				
				var chk:Boolean = false;
				trace(WmModule.getInstance.level2);
				trace(WmModule.getInstance.level3);
				trace(WmModule.getInstance.lv3OpenClose);
				if(WmModule.getInstance.level2){
					WmModule.getInstance.lv3OpenClose = !WmModule.getInstance.lv3OpenClose;
					if(WmModule.getInstance.lv3OpenClose){
						chk = setOpenNodes(4);
						WmModule.getInstance.level4 = chk;
						WmModule.getInstance.lv4OpenClose = false;
						trace(WmModule.getInstance.level2);
						trace(WmModule.getInstance.level3);
						trace(WmModule.getInstance.lv3OpenClose);
						
					} else {
						chk = setOpenNodes(3);
						WmModule.getInstance.level3 = chk;
						if(!chk){
							WmModule.getInstance.level4 = chk;
						}
						trace(WmModule.getInstance.level2);
						trace(WmModule.getInstance.level3);
						trace(WmModule.getInstance.lv3OpenClose);
						
					}
				}
			}
			
/* David commented out
			protected function dg_itemOpenHandler(event:AdvancedDataGridEvent):void
			{
				var i:int =	Batches_DG.getCurrentDepth(event.item);	
				var chk:Boolean = setOpenCurrNodes(i);
				WmModule.getInstance.setCurrDeptOpen(i,chk);  // 1,true
			}*/
			
/* David commented out
			protected function dg_itemCloseHandler(event:AdvancedDataGridEvent):void
			{
				var i:int = Batches_DG.getCurrentDepth(event.item);
				var chk:Boolean = setOpenCurrNodes(i);
				
				WmModule.getInstance.setCurrentDeptClose(i,chkOpenAll(i));
				
			}*/
			
			private function chkOpenAll(depth:int):Boolean
			{
				var hcv:HierarchicalCollectionView = Batches_DG.dataProvider as HierarchicalCollectionView;
				var dataCursor:IHierarchicalCollectionViewCursor = hcv.createCursor() as IHierarchicalCollectionViewCursor;
				var i:int = 0;			
				dataCursor.seek(CursorBookmark.FIRST);
				while (!dataCursor.afterLast)
				{
					//					trace('isopen',dg.isItemOpen(dataCursor.current));
					if (dataCursor.currentDepth >= depth) {
						if(Batches_DG.isItemOpen(dataCursor.current)){
							i++;
						}
					} 
					dataCursor.moveNext();
				}
				
				dataCursor.seek(CursorBookmark.FIRST, verticalScrollPosition);
				hcv.refresh();	
				
				return i>0;
			}
			
			protected function advanceddatagrid_itemDoubleClickHandler(evt:ListEvent):void
			{
				// TODO Auto-generated method stub
				//var customTitleWindow:CustomTitleWindow = new CustomTitleWindow();
				/* {
					pop = new PopUpCustomTitleWindow();
					pop.height=FlexGlobals.topLevelApplication.height;
					pop.width=FlexGlobals.topLevelApplication.width;
					pop.addEventListener(DocViewerEvent.DocViewer_CLOSE,closePopUp);
					PopUpManager.addPopUp(pop,this);	
				} */
				
				var obj:Object = (evt.currentTarget as AdvancedDataGrid).selectedItem;
				var docViewTTW:DocViewerTitleWindow = new DocViewerTitleWindow();
				//docViewTTW.ImageName = obj.Image;
				docViewTTW.ImageName = "1.png";
				PopUpManager.addPopUp(docViewTTW,this,false);
				PopUpManager.centerPopUp(docViewTTW);
			}
			
			public function closePopUp(event:DocViewerEvent):void
			{
				pop.removeEventListener(DocViewerEvent.DocViewer_CLOSE,closePopUp);
				PopUpManager.removePopUp(pop);
			}
			
			protected function dg_itemOpenHandler(e:AdvancedDataGridEvent):void
			{
				var i:int =	Batches_DG.getCurrentDepth(e.item as Object);	
				var chk:Boolean = setOpenCurrNodes(i);
				WmModule.getInstance.setCurrDeptOpen(i,chk);  // 1,true
			}
			protected function dg_itemCloseHandler(e:AdvancedDataGridEvent):void
			{
				var i:int = Batches_DG.getCurrentDepth(e.item as Object);
				var chk:Boolean = setOpenCurrNodes(i);				
				WmModule.getInstance.setCurrentDeptClose(i,chkOpenAll(i));
			}
			
			protected function Batches_DG_headerReleaseHandler(e:AdvancedDataGridEvent):void
			{
				if(e.dataField == 'ID'){
					e.preventDefault();
				}
			}
			
			protected function Transactions_DG_itemDoubleClickHandler(evt:ListEvent):void
			{
				// TODO Auto-generated method stub
				var obj:Object = (evt.currentTarget as AdvancedDataGrid).selectedItem;
				var workViewTTW:WorkViewerTitleWindow = new WorkViewerTitleWindow();
				//docViewTTW.ImageName = obj.Image;
				workViewTTW.ImageName = "1.png";
				PopUpManager.addPopUp(workViewTTW,this,false);
				PopUpManager.centerPopUp(workViewTTW);				
			}
			
			//############################ See: Modify 20140108 - 20140113 ##########################//
			protected function openCloseDGByTree(type:String, isToggle:Boolean):void {
				//Batch processing
				if ( type == "BP" ) { 
					DG_TW1.visible = isToggle;
					DG_TW1.includeInLayout = isToggle;
					
					//if ( isToggle ) {
						//If root of tree is checked, expand all tree node
						BatchesTree.openItems = [];
						BatchesTree.expandChildrenOf(BatchesTree.dataProvider[0],true);
					//} 
				
				//Document processing
				} else if ( type == "DP" ) {
					DG_TW2.visible = isToggle;
					DG_TW2.includeInLayout = isToggle;
					
					//if ( isToggle ) {
						//If root of tree is checked, expand all tree node
						DocumentsTree.openItems = [];
						DocumentsTree.expandChildrenOf(DocumentsTree.dataProvider[0],true);
					//}

				//Transactions1
				} else if ( type == "T1" ) {
					DG_TW3_1.visible = isToggle;
					DG_TW3_1.includeInLayout = isToggle;
					
					TransactionsTree.openItems = [];
					TransactionsTree.expandChildrenOf(TransactionsTree.dataProvider[0],true);
					
				//Transactions2
				} else if ( type == "T2" ) {
					DG_TW3_2.visible = isToggle;
					DG_TW3_2.includeInLayout = isToggle;
				
					TransactionsTree.openItems = [];
					TransactionsTree.expandChildrenOf(TransactionsTree.dataProvider[0],true);
					
				//Transactions
				} else if ( type == "T" ) {
					DG_TW3_1.visible = isToggle;
					DG_TW3_1.includeInLayout = isToggle;
					DG_TW3_2.visible = isToggle;
					DG_TW3_2.includeInLayout = isToggle;
					
					TransactionsTree.openItems = [];
					TransactionsTree.expandChildrenOf(TransactionsTree.dataProvider[0],true);
				}
			}
					
			protected function DG_TW1_closeHandler():void {
				updateTreeFromCloseEvent("BP", "BatchesTree");
				openCloseDGByTree("BP", false);
			}
			
			protected function DG_TW2_closeHandler():void {
				updateTreeFromCloseEvent("DP", "DocumentsTree");
				openCloseDGByTree("DP", false);
			}
			
			protected function DG_TW3_1_closeHandler():void {
				updateTreeFromCloseEvent("T1", "TransactionsTree");
				openCloseDGByTree("T1", false);
			}
			
			protected function DG_TW3_2_closeHandler():void {
				updateTreeFromCloseEvent("T2", "TransactionsTree");
				openCloseDGByTree("T2", false);
			}
			
			public function chkTreeCheckBoxType(dataProviderType:String, openstate:Boolean):void {
				openCloseDGByTree(dataProviderType, openstate);
			}
			
			private function updateTreeFromCloseEvent(closeBoxName:String, treeId:String):void {
				updateTreeOpenCloseState("close", closeBoxName, treeId);
			}
			
			protected function updateTreeOpenCloseState(state:String, chkName:String, treeId:String):void {
				var tc:XMLListCollection = new XMLListCollection();
				var xl:XMLList = null;
				var treeidDPTemp:XMLListCollection = null;
				
				if ( treeId == "BatchesTree" ) {
					treeidDPTemp = BatchesTree.dataProvider as XMLListCollection; 
				
				} else if ( treeId == "DocumentsTree" ) {
					treeidDPTemp = DocumentsTree.dataProvider as XMLListCollection;
					
				} else if ( treeId == "TransactionsTree" ) {
					treeidDPTemp = TransactionsTree.dataProvider as XMLListCollection;
				}
				 
				xl = new XMLList(treeidDPTemp.toXMLString());
				
				//Get object from data provider to update tree check box state when open/close datagrid
				var getObj:Object = null;
				for each( var nodelist:XML in xl ) {
					getObj = nodelist;
					break;
				}
				
				if ( getObj.@treeType == "A" ) {
					//Batch processing
					if ( getObj.@providerType == "BP" ) {
						toggleChildren(getObj, BatchesTree, "unchecked");
						tc.addItem(getObj);
						xmlListTmp1 = tc;
						BatchesTree.dataProvider = xmlListTmp1;
						BatchesTree.invalidateList();
						BatchesTree.invalidateDisplayList();
					
					//Document processing
					} else if ( getObj.@providerType == "DP" ) {
						toggleChildren(getObj, DocumentsTree, "unchecked");
						tc.addItem(getObj);
						xmlListTmp2 = tc;
						DocumentsTree.dataProvider = xmlListTmp2;
						DocumentsTree.invalidateList();
						DocumentsTree.invalidateDisplayList();
					}


//----------------------------------------- Start : [In progress : See 20140119 ] ------------------------------------------//
				} else if ( getObj.@treeType == "B" ) {
					//var xxx:Object = getNodeObject(xl, getObj.@treeType, getObj.@);
					//Transactions
					//var selectedObj:Object = findSelectedChildren(getObj, TransactionsTree, chkName, treeidDPTemp);
					
					findSelectedChildren(getObj, TransactionsTree, chkName, treeidDPTemp);
					
					//In progress
					//var parent:Object=TransactionsTree.getParentItem(selectedObj);
					//toggleParents(parent, TransactionsTree, getState(TransactionsTree, parent));
					
					tc.addItem(getObj);
					xmlListTmp3 = tc;
					TransactionsTree.dataProvider = xmlListTmp3;
					TransactionsTree.invalidateList();
					TransactionsTree.invalidateDisplayList();
				}
//----------------------------------------- End : [In progress : See 20140119 ] ------------------------------------------//
			}
			
			private function toggleChildren(item:Object, tree:Tree, state:String):void {
				if (item == null)
				{
					return;
				}
				else
				{
					item.@state = state;
					var treeData:ITreeDataDescriptor=tree.dataDescriptor;
					if (treeData.hasChildren(item))
					{
						var children:ICollectionView=treeData.getChildren(item);
						var cursor:IViewCursor=children.createCursor();
						while (!cursor.afterLast)
						{
							toggleChildren(cursor.current, tree, state);
							cursor.moveNext();
						}
					}
				}
			}

//----------------------------------------- Start : [In progress : See 20140119 ] ------------------------------------------//
			private function findSelectedChildren(item:Object, tree:Tree, checkName:String, data:Object):void
			{
				//var foundObj:Object = null;
				
				var childrenList:Object = item.children();
				
				for each( var nodelist:Object in childrenList ) {
					if ( nodelist.@providerType == checkName ) {
						//foundObj = nodelist;
						toggleChildren(nodelist, TransactionsTree, "unchecked");
						//foundObj = nodelist;
						//var parent:Object=tree.getParentItem(nodelist);
						//toggleParents(parent, tree, getState(tree, parent));
						break;
					}
				}
				
				//return foundObj;
			}
			
			private function toggleParents(item:Object, tree:Tree, state:String):void
			{
				if (item == null)
				{
					return;
				}
				else
				{
					item.@state=state;
					toggleParents(tree.getParentItem(item), tree, getState(tree, tree.getParentItem(item)));
				}
			}
			
			private function getState(tree:Tree, parent:Object):String
			{
				var returnState:String = null;
				var countOfChecks:int=0;
				var countOfUnChecks:int=0;
				var countOfSchrodinger:int=0;
				
				if (parent != null) {
					var treeData:ITreeDataDescriptor=tree.dataDescriptor;
					var cursor:IViewCursor=treeData.getChildren(parent).createCursor();
					
					while (!cursor.afterLast) {
						if (cursor.current.state == "checked") {
							countOfChecks++;
						}
						else if (cursor.current.state == "unchecked") {
							countOfUnChecks++
						}
						else if (cursor.current.state == "schrodinger") {
							countOfSchrodinger++;
						}
						cursor.moveNext();
					}
					
					//check count of state for return
					if ( (countOfChecks > 0 && countOfUnChecks > 0)
						|| (countOfChecks > 0 && countOfSchrodinger > 0)
						|| (countOfUnChecks > 0 &&  countOfSchrodinger > 0)
						|| countOfSchrodinger > 0 ) {
						
						returnState = "schrodinger";
						
					} else if ( countOfChecks > 0 ) {
						returnState = "checked";
						
					} else if ( countOfUnChecks > 0 ) {
						returnState = "unchecked";
					}
				}
				
				return returnState;
			}
			
//----------------------------------------- End : [In progress : See 20140119 ] ------------------------------------------//					
			
			//############################ See: Modify 20140108 - 20140113 ##########################//
		]]>
	</fx:Script>
	<s:BorderContainer width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout gap="0" paddingBottom="0" paddingLeft="0" paddingRight="0"
							  paddingTop="0"/>
		</s:layout>
		
		<!--Stage-->
		<s:BorderContainer id="Stage" width="100%" height="100%" borderVisible="false">
			<s:layout>
				<s:VerticalLayout gap="0" paddingBottom="0" paddingLeft="0" paddingRight="0"
								  paddingTop="0"/>
			</s:layout>
			
			<!--Boxes and Results-->
			<s:BorderContainer id="BoxesAndResults" width="100%" height="100%" borderVisible="false">
				<s:layout>
					<s:HorizontalLayout gap="10" paddingBottom="5" paddingLeft="5" paddingRight="5"
										paddingTop="5"/>
				</s:layout>
				
				<!--Boxes "accordion"-->
				<s:VGroup width="170" gap="5">
					
					<s:VGroup width="170" height="130" gap="0" verticalAlign="middle"
							  verticalCenter="0">
						<components:CollapsiblePanel id="Section1" width="100%"
													 dropShadowVisible="false"
													 skinClass="com.shinynet.shinylib.skins.CollapsiblePanelSkin"
													 styleName="WM_PanelHeader"
													 title="Batch Processing">
							<s:VGroup width="100%" gap="0" paddingBottom="2.5" paddingTop="2.5">
								<fx:Script>
									<![CDATA[
										[Bindable]
										public var BatchesTreeList:XMLList = 
											<>
												<folder label="Batch Type" isBranch="true" open="true" state="checked" root="1" providerType="BP" treeType="A">
													<folder label="ALL BATCH TYPES" isBranch="false" open="true" state="checked" root="0" providerType="BP" treeType="A"/>
													<folder label="BatchType1" isBranch="true" open="true" state="checked" root="0" providerType="BP" treeType="A">
														<folder label="SubBatchType1" isBranch="false" open="true" state="checked" root="0" providerType="BP" treeType="A"/>
													</folder>
													<folder label="BatchType2" isBranch="false" open="true" state="checked" root="0" providerType="BP" treeType="A"/>
												</folder>
											</>;
									]]>
								</fx:Script>
								<mx:Tree id="BatchesTree" width="100%" borderVisible="false"
										 creationComplete="OpenBatchesTreeNodes()"
										 dataProvider="{BatchesTree_XC}" defaultLeafIcon="{null}"
										 folderClosedIcon="{null}" folderOpenIcon="{null}"
										 itemRenderer="custom_tree_component.CheckTreeRenderer_For_WM"
										 labelField="@label" rowHeight="15" styleName="WM_PanelBody">
										 <!-- doubleClickEnabled="true"
											  itemDoubleClick="BatchesTree_itemDoubleClickHandler()" -->
								</mx:Tree>
							</s:VGroup>
						</components:CollapsiblePanel>
					</s:VGroup>
	
					<s:VGroup width="170" height="130" gap="0" verticalAlign="middle"
							  verticalCenter="0">
						<components:CollapsiblePanel id="Section2" width="100%"
													 dropShadowVisible="false"
													 skinClass="com.shinynet.shinylib.skins.CollapsiblePanelSkin"
													 styleName="WM_PanelHeader"
													 title="Document Processing">
							<s:VGroup width="100%" gap="0" paddingBottom="2.5" paddingTop="2.5">
								<fx:Script>
									<![CDATA[
										[Bindable]
										public var DocumentsTreeList:XMLList =
											<>
												<folder label="ALL DOCUMENT Types" isBranch="true" open="true" state="checked" root="1" providerType="DP" treeType="A">
													<folder label="DocType1" isBranch="false" open="true" state="checked" root="0" providerType="DP" treeType="A"/>
													<folder label="DocType2" isBranch="false" open="true" state="checked" root="0" providerType="DP" treeType="A"/>
												</folder>
											</>;
									]]>
								</fx:Script>
								<mx:Tree id="DocumentsTree" width="100%" borderVisible="false"
										 creationComplete="OpenDocumentsTreeNodes()"
										 dataProvider="{DocumentsTree_XC}" defaultLeafIcon="{null}"
										 folderClosedIcon="{null}" folderOpenIcon="{null}"
										 itemRenderer="custom_tree_component.CheckTreeRenderer_For_WM"
										 labelField="@label" rowHeight="15" styleName="WM_PanelBody">
									<!--folderClosedIcon="@Embed(source='Assets.swf',symbol='TreeFolderClosed')"
									folderOpenIcon="@Embed(source='Assets.swf',symbol='TreeFolderClosed')"
									defaultLeafIcon="@Embed(source='Assets.swf',symbol='TreeFolderClosed')"-->
								</mx:Tree>
							</s:VGroup>
						</components:CollapsiblePanel>
					</s:VGroup>
					
					<s:VGroup width="170" height="130" gap="0" verticalAlign="middle"
							  verticalCenter="0">
						<components:CollapsiblePanel id="Section3" width="100%"
													 dropShadowVisible="false"
													 skinClass="com.shinynet.shinylib.skins.CollapsiblePanelSkin"
													 styleName="WM_PanelHeader" title="Transactions">
							<s:VGroup width="100%" gap="0" paddingBottom="2.5" paddingTop="2.5">
								<fx:Script>
									<![CDATA[
										[Bindable]
										public var TransactionsTreeList:XMLList =
											<>
												<folder label="ALL PROCEDURES" isBranch="true" open="true" state="checked" providerType="T" treeType="B">
													<folder label="Procedure1" isBranch="false" open="true" state="checked" providerType="T1" treeType="B"/>
													<folder label="Procedure2" isBranch="false" open="true" state="checked" providerType="T2" treeType="B"/>
												</folder>
											</>;
									]]>
								</fx:Script>
								<mx:Tree id="TransactionsTree" width="100%" borderVisible="false"
										 creationComplete="OpenDocumentsTreeNodes()"
										 dataProvider="{TransactionsTree_XC}"
										 defaultLeafIcon="{null}" folderClosedIcon="{null}"
										 folderOpenIcon="{null}"
										 itemRenderer="custom_tree_component.CheckTreeRenderer_For_WM"
										 labelField="@label" rowHeight="15" styleName="WM_PanelBody">
									<!--folderClosedIcon="@Embed(source='Assets.swf',symbol='TreeFolderClosed')"
									folderOpenIcon="@Embed(source='Assets.swf',symbol='TreeFolderClosed')"
									defaultLeafIcon="@Embed(source='Assets.swf',symbol='TreeFolderClosed')"-->
								</mx:Tree>
							</s:VGroup>
						</components:CollapsiblePanel>
					</s:VGroup>
					
					<s:BorderContainer width="170" height="30" borderVisible="false">
						<s:layout>
							<s:VerticalLayout verticalAlign="middle"/>
						</s:layout>
						<s:CheckBox width="170" label="Include closed transactions"
									styleName="ClientLabelDark"/>					
					</s:BorderContainer>
				</s:VGroup>
				
				<!--Results-->
				<s:BorderContainer id="Results" width="100%" height="100%" borderVisible="false">
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					
					<!--Start of datagrids-->
					<mx:VDividedBox width="100%" height="100%">
						<component:CustomTitleWindow id="DG_TW1" width="100%" height="100%"
													 borderVisible="true"
													 close="DG_TW1_closeHandler()"
													 dropShadowVisible="false" headerHeight="18"
													 skinClass="skin.CustomTitleWindowSkin"
													 title="Batches &amp; Objects">
							<mx:Canvas id="C1" x="0" width="100%" height="100%" borderVisible="false"
									   clipContent="true" horizontalScrollPolicy="auto"
									   verticalScrollPolicy="auto">
								<s:VGroup id="VG1" height="{C1.height-15}"
										  clipAndEnableScrolling="true" gap="0" paddingBottom="0"
										  paddingLeft="0" paddingRight="0" paddingTop="0">
									<fx:Script>
										<![CDATA[
											[Bindable]
											private var Batches_AC:ArrayCollection = new ArrayCollection(
												[
													{EntityType:"Batch", Priority:"1", ID:"Batch1ID", Type:"Batch1Type", 
														Pages:"nnnnn", Docs:"nnnn", Source:"Source", Filename:"Filename", Status:"StatusValue", 
														Started:"dd/mm/yyyy hh:mm", Completed:56, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"1",
														checked:"false", children: [
															{EntityType:"SubBatch", Priority:"1", ID:"Batch2ID", Type:"Batch2Type", 
																Pages:"nnnnn", Docs:"nnnn", Source:"Source", Filename:"Filename", Status:"StatusValue", 
																Started:"dd/mm/yyyy hh:mm", Completed:56, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"2",
																checked:"false", children: [
																	{EntityType:"Object", Priority:"2", ID:"Obj1ID", Type:"Doc1Type", 
																		Pages:"nnnnn", Docs:"icon", Source:"Source", Filename:"Filename", Status:"StatusValue", 
																		Started:"dd/mm/yyyy hh:mm", Completed:78, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"3",
																		checked:false},
																	{EntityType:"Object", Priority:"2", ID:"Obj2ID", Type:"Doc1Type", 
																		Pages:"nnnnn", Docs:"icon", Source:"Source", Filename:"Filename", Status:"StatusValue", 
																		Started:"dd/mm/yyyy hh:mm", Completed:78, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"3",
																		checked:false},
																	{EntityType:"Object", Priority:"3", ID:"Obj3ID", Type:"Doc2Type", 
																		Pages:"nnnnn", Docs:"icon", Source:"Source", Filename:"Filename", Status:"StatusValue", 
																		Started:"dd/mm/yyyy hh:mm", Completed:67, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"3",
																		checked:false},
																	{EntityType:"Object", Priority:"3", ID:"Obj4ID", Type:"Doc2Type", 
																		Pages:"nnnnn", Docs:"icon", Source:"Source", Filename:"Filename", Status:"StatusValue", 
																		Started:"dd/mm/yyyy hh:mm", Completed:67, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"3",
																		checked:false}
																]}
														]},
													{EntityType:"Batch", Priority:"4", ID:"Batch3ID", Type:"Batch3Type", 
														Pages:"nnnnn", Docs:"nnnn", Source:"Source", Filename:"Filename", Status:"StatusValue", 
														Started:"dd/mm/yyyy hh:mm", Completed:55, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"1",
														checked:"false", children: [
															{EntityType:"Object", Priority:"2", ID:"Obj5ID", Type:"Doc1Type", 
																Pages:"nnnnn", Docs:"icon", Source:"Source", Filename:"Filename", Status:"StatusValue", 
																Started:"dd/mm/yyyy hh:mm", Completed:78, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"3",
																checked:false},
															{EntityType:"Object", Priority:"3", ID:"Obj6ID", Type:"Doc2Type", 
																Pages:"nnnnn", Docs:"icon", Source:"Source", Filename:"Filename", Status:"StatusValue", 
																Started:"dd/mm/yyyy hh:mm", Completed:67, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"3",
																checked:false},
															{EntityType: "Object", Priority:"6", ID:"Obj7ID", Type:"Doc2Type", 
																Pages:"nnnnn", Docs:"icon", Source:"Source", Filename:"Filename", Status:"StatusValue", 
																Started:"dd/mm/yyyy hh:mm", Completed:34, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"3",
																checked:false}
														]}
												]);
											
											[Bindable]
											private var BatchObjects_AC:ArrayCollection = new ArrayCollection(
												[
													{EntityType:"Object", BatchID:"Batch2ID", ObjID:"Obj1ID", ThumbImage:"1T.png", Image:"1.png"},
													{EntityType:"Object", BatchID:"Batch2ID", ObjID:"Obj2ID", ThumbImage:"2T.png", Image:"2.png"},
													{EntityType:"Object", BatchID:"Batch2ID", ObjID:"Obj3ID", ThumbImage:"3T.png", Image:"3.png"},
													{EntityType:"Object", BatchID:"Batch2ID", ObjID:"Obj4ID", ThumbImage:"4T.png", Image:"4.png"},
													{EntityType:"Object", BatchID:"Batch3ID", ObjID:"Obj5ID", ThumbImage:"1T.png", Image:"1.png"},
													{EntityType:"Object", BatchID:"Batch3ID", ObjID:"Obj6ID", ThumbImage:"2T.png", Image:"2.png"},
													{EntityType:"Object", BatchID:"Batch3ID", ObjID:"Obj7ID", ThumbImage:"3T.png", Image:"3.png"}
												]);
										]]>
									</fx:Script>
									
									<!--Integrate this group into CustomTitleWindow component [David]-->
									<s:HGroup width="{DG_TW1.width}" height="{DG_TW1.headerHeight}"
											  horizontalAlign="right" verticalAlign="baseline">
										<fx:Script>
											<![CDATA[
												private var Batches_DG_tempwidth:Number;
												
												private function ShrinkExpandBatches_DG(event:Event):void
												{
													//if (event.target.selected)
													if (TB1.selected)
													{
														TB1.label = 'Expand';
														Batches_DG.width = Batches_DG_tempwidth;
												
													} else {
														TB1.label = 'Shrink';
														Batches_DG_tempwidth = Batches_DG.width;
													}
												}
											]]>
										</fx:Script>
										<s:ToggleButton id="TB1" label="Shrink"
														click="ShrinkExpandBatches_DG(event)"
														horizontalCenter="0"/>
									</s:HGroup>
									
									<pages:CustomADG id="Batches_DG" width="{DGwidth}" height="100%"
													 borderVisible="false" defaultLeafIcon="{null}"
													 doubleClickEnabled="true"
													 draggableColumns="true"
													 folderClosedIcon="{null}"
													 folderOpenIcon="{null}" headerHeight="20"
													 headerRelease="Batches_DG_headerReleaseHandler(event)"
													 headerStyleName="DataGridHeader"
													 horizontalScrollPolicy="off" indentation="17"
													 itemClose="dg_itemCloseHandler(event)"
													 itemDoubleClick="advanceddatagrid_itemDoubleClickHandler(event)"
													 itemOpen="dg_itemOpenHandler(event)"
													 minColumnWidth="0" resizableColumns="true"
													 rowHeight="20" sortableColumns="true"
													 sortExpertMode="true" styleName="DataGridBody"
													 treeColumn="{Batches_DG_ID}"
													 verticalAlign="middle"
													 verticalScrollPolicy="off">
										<pages:dataProvider>
											<mx:HierarchicalData source="{Batches_AC}"/>
										</pages:dataProvider>
										<pages:columns>
											<mx:AdvancedDataGridColumn id="Batches_DG_Checkbox"
																	   width="{(DGwidth-DGwidth)+18}"
																	   dataField="checked"
																	   draggable="false"
																	   headerRenderer="component.ThreeStateCheckBoxHeaderRenderer"
																	   headerText=""
																	   itemRenderer="component.CheckBoxItemRenderer"
																	   rendererIsEditor="false"
																	   resizable="false"
																	   sortable="false"
																	   textAlign="center"/>
											<mx:AdvancedDataGridColumn id="Batches_DG_Info"
																	   width="{(DGwidth-DGwidth)+18}"
																	   dataField="Information"
																	   draggable="false"
																	   resizable="false"
																	   sortable="false"
																	   textAlign="center">
												<mx:headerRenderer>
													<fx:Component>
														<mx:HBox width="{outerDocument.Batches_DG_Info.width}"
																 horizontalAlign="center"
																 verticalAlign="middle">																
															<s:Image width="90%" height="90%"
																	 source="@Embed('assets/iconinfo.png')">
																<fx:Script>
																	<![CDATA[
																		import mx.controls.Alert;
																	]]>
																</fx:Script>
															</s:Image>
														</mx:HBox>						
													</fx:Component>							
												</mx:headerRenderer>
												<mx:itemRenderer>
													<fx:Component>
														<mx:HBox width="{outerDocument.Batches_DG_Info.width}"
																 horizontalAlign="center"
																 verticalAlign="middle">							
															<fx:Script>
																<![CDATA[
																	import component.CustomTitleWindow;
																	
																	import mx.containers.TitleWindow;
																	import mx.core.FlexGlobals;
																	import mx.events.CloseEvent;
																	import mx.managers.PopUpManager;
																	//private var ttw:WmTitleWindows = new WmTitleWindows();	
																	private var ttw:WmTitleWindows = new WmTitleWindows();	
																	protected function image1_clickHandler(event:MouseEvent):void
																	{
																		ttw.addEventListener(CloseEvent.CLOSE,closePopup);
																		ttw.ld = data;
																		PopUpManager.addPopUp(ttw,FlexGlobals.topLevelApplication as DisplayObject,true);
																		PopUpManager.centerPopUp(ttw);
																		ttw.setData();
																		
																	}
																	
																	protected function closePopup(event:Event):void
																	{
																		PopUpManager.removePopUp(ttw);										
																	}
																	
																]]>
															</fx:Script>
															
															<s:Image width="90%" height="90%"
																	 click="image1_clickHandler(event)"
																	 source="@Embed('assets/iconinfo.png')">
																<fx:Script>
																	<![CDATA[
																		import mx.controls.Alert;
																	]]>
																</fx:Script>
															</s:Image>
														</mx:HBox>						
													</fx:Component>
												</mx:itemRenderer>
											</mx:AdvancedDataGridColumn>
											<!--itemRenderer="component.PriorityItemRenderer"-->
											<mx:AdvancedDataGridColumn id="Batches_DG_Priority"
																	   width="{(DGwidth-DGwidth)+45}"
																	   minWidth="45"
																	   dataField="Priority"
																	   draggable="false"
																	   headerText="Priority"
																	   itemRenderer="component.PopUpButtonItemRenderer_Priority"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Batches_DG_ID" width="190"
																	   dataField="ID"
																	   draggable="true"
																	   headerText="ID"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left">
												<mx:headerRenderer>
													<fx:Component>
														<mx:HBox width="{outerDocument.Batches_DG_ID.width}"
																 horizontalAlign="left"
																 horizontalGap="0"
																 verticalAlign="middle">
															<fx:Script>
																<![CDATA[
																	import mx.core.FlexGlobals;
																]]>
															</fx:Script>
															<s:Image id="imglv1"
																	 visible="{WmModule.getInstance.level1}"
																	 click="outerDocument.lv1Click(event)"
																	 source="{ WmModule.getInstance.lv1OpenClose ? FlexGlobals.topLevelApplication.FLODER_OPEN : FlexGlobals.topLevelApplication.FLODER_CLOSE}"/>
															<s:Spacer width="{ outerDocument.Batches_DG.getStyle('indentation')-12 }"/>
															<s:Image id="imglv2"
																	 visible="{WmModule.getInstance.level2}"
																	 click="outerDocument.lv2click()"
																	 source="{WmModule.getInstance.lv2OpenClose ? FlexGlobals.topLevelApplication.FLODER_OPEN2 : FlexGlobals.topLevelApplication.FLODER_CLOSE2}"/>
															<s:Spacer width="{ outerDocument.Batches_DG.getStyle('indentation')-12 }"/>
															<s:Image id="imglv3"
																	 visible="{WmModule.getInstance.level3}"
																	 click="outerDocument.lv3click()"
																	 source="{ WmModule.getInstance.lv3OpenClose ? FlexGlobals.topLevelApplication.FLODER_OPEN3 : FlexGlobals.topLevelApplication.FLODER_CLOSE3 }"/>
															<s:Spacer width="5"/>
															<mx:Text color="red" text="ID"/>
														</mx:HBox>
													</fx:Component>
												</mx:headerRenderer>
											</mx:AdvancedDataGridColumn>		
											<mx:AdvancedDataGridColumn id="Batches_DG_Type"
																	   width="118" minWidth="120"
																	   color="red" dataField="Type"
																	   draggable="true"
																	   headerText="Type"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Batches_DG_Pages"
																	   width="60" minWidth="60"
																	   dataField="Pages"
																	   draggable="true"
																	   headerText="Pages"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Batches_DG_Docs"
																	   width="60" minWidth="60"
																	   dataField="Docs"
																	   draggable="true"
																	   headerText="Docs"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>					
											<mx:AdvancedDataGridColumn id="Batches_DG_Source"
																	   width="140" minWidth="140"
																	   dataField="Source"
																	   draggable="true"
																	   headerText="Source"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Batches_DG_Filename"
																	   width="80" minWidth="80"
																	   dataField="Filename"
																	   draggable="true"
																	   headerText="Filename"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Batches_DG_Status"
																	   width="200" minWidth="120"
																	   dataField="Status"
																	   draggable="true"
																	   headerText="Status"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Batches_DG_Started"
																	   width="{(DGwidth-DGwidth)+105}"
																	   minWidth="105"
																	   dataField="Started"
																	   draggable="true"
																	   headerText="Started"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Batches_DG_Completed"
																	   width="{(DGwidth-DGwidth)+105}"
																	   minWidth="105"
																	   dataField="Completed"
																	   draggable="true"
																	   headerText="% Completed"
																	   itemRenderer="component.CompletionBarItemRenderer"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Batches_DG_Estimate"
																	   width="{(DGwidth-DGwidth)+100}"
																	   minWidth="100"
																	   dataField="Estimate"
																	   draggable="true"
																	   headerText="Est. Completion"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Batches_DG_Deadline"
																	   width="{(DGwidth-DGwidth)+95}"
																	   minWidth="95"
																	   dataField="Deadline"
																	   draggable="true"
																	   headerText="Deadline"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
										</pages:columns>
									</pages:CustomADG>
									
								</s:VGroup>
							</mx:Canvas>						
						</component:CustomTitleWindow>
						
						<component:CustomTitleWindow id="DG_TW2" width="100%" height="100%"
													 borderVisible="true"
													 close="DG_TW2_closeHandler()"
													 dropShadowVisible="false" headerHeight="18"
													 skinClass="skin.CustomTitleWindowSkin"
													 title="Document Processing">
							<mx:Canvas id="C2" x="0" width="100%" height="100%" borderVisible="false"
									   clipContent="true" horizontalScrollPolicy="auto"
									   verticalScrollPolicy="auto">
								<s:VGroup id="VG2" height="{C2.height-15}"
										  clipAndEnableScrolling="true" gap="0" paddingBottom="0"
										  paddingLeft="0" paddingRight="0" paddingTop="0">
									<fx:Script>
										<![CDATA[
											[Bindable]
											private var Documents_AC:ArrayCollection = new ArrayCollection(
												[
													{EntityType:"Document", Priority:"1", ID:"Doc1ID", Type:"Doc1Type", 
														Pages:"nnnnn", Docs:"nnnn", Source:"Source", Filename:"Filename", Status:"StatusValue", 
														Started:"dd/mm/yyyy hh:mm", Completed:56, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", 
														DocID:"Doc1ID", FormID:"1", checked:false},
													{EntityType:"Document", Priority:"1", ID:"Doc2ID", Type:"Doc2Type", 
														Pages:"nnnnn", Docs:"nnnn", Source:"Source", Filename:"Filename", Status:"StatusValue", 
														Started:"dd/mm/yyyy hh:mm", Completed:56, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", 
														DocID:"Doc1ID", FormID:"1", checked:false},
													{EntityType:"Document", Priority:"1", ID:"Doc3ID", Type:"Doc3Type", 
														Pages:"nnnnn", Docs:"nnnn", Source:"Source", Filename:"Filename", Status:"StatusValue", 
														Started:"dd/mm/yyyy hh:mm", Completed:56, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", 
														DocID:"Doc1ID", FormID:"1", checked:false}
												]);
											
											[Bindable]
											private var DocumentObjects_AC:ArrayCollection = new ArrayCollection(
												[
													{EntityType:"Document", DocID:"Doc1ID", ThumbImage:"1T.png", Image:"1.png"},
													{EntityType:"Document", DocID:"Doc2ID", ThumbImage:"2T.png", Image:"2.png"},
													{EntityType:"Document", DocID:"Doc3ID", ThumbImage:"3T.png", Image:"3.png"}
												]);
										]]>
									</fx:Script>
									
									<!--Integrate this group into CustomTitleWindow component [David]-->
									<s:HGroup width="{DG_TW2.width}" height="{DG_TW2.headerHeight}"
											  horizontalAlign="right" verticalAlign="baseline">
										<fx:Script>
											<![CDATA[
												private var Documents_DG_tempwidth:Number;
												
												private function ShrinkExpandDocuments_DG(event:MouseEvent):void
												{
													//if (event.target.selected)
													if (TB2.selected)
													{
														TB2.label = 'Expand';
														Documents_DG.width = Documents_DG_tempwidth;
														
													} else {
														TB2.label = 'Shrink';
														Documents_DG_tempwidth = Documents_DG.width;
													}
												}
											]]>
										</fx:Script>
										<s:ToggleButton id="TB2" label="Shrink"
														click="ShrinkExpandDocuments_DG(event);"
														horizontalCenter="0"/>
									</s:HGroup>
									
									<mx:AdvancedDataGrid id="Documents_DG" width="{DGwidth}"
														 height="100%" borderVisible="false"
														 dataProvider="{Documents_AC}"
														 doubleClickEnabled="true"
														 draggableColumns="true" headerHeight="20"
														 headerRelease="Batches_DG_headerReleaseHandler(event)"
														 headerStyleName="DataGridHeader"
														 horizontalScrollPolicy="off"
														 itemClose="dg_itemCloseHandler(event)"
														 itemDoubleClick="advanceddatagrid_itemDoubleClickHandler(event)"
														 itemOpen="dg_itemOpenHandler(event)"
														 minColumnWidth="0" resizableColumns="true"
														 rowHeight="20" sortableColumns="true"
														 sortExpertMode="true"
														 styleName="DataGridBody"
														 verticalAlign="middle"
														 verticalScrollPolicy="off">
										<mx:columns>
											<mx:AdvancedDataGridColumn id="Documents_DG_Checkbox"
																	   width="{(DGwidth-DGwidth)+18}"
																	   dataField="checked"
																	   draggable="false"
																	   headerRenderer="component.ThreeStateCheckBoxHeaderRenderer"
																	   headerText=""
																	   itemRenderer="component.CheckBoxItemRenderer"
																	   rendererIsEditor="false"
																	   resizable="false"
																	   sortable="false"
																	   textAlign="center"/>
											<mx:AdvancedDataGridColumn id="Documents_DG_Info"
																	   width="{(DGwidth-DGwidth)+18}"
																	   dataField="Information"
																	   draggable="false"
																	   resizable="false"
																	   sortable="false"
																	   textAlign="center">
												<mx:headerRenderer>
													<fx:Component>
														<mx:HBox width="{outerDocument.Documents_DG_Info.width}"
																 horizontalAlign="center"
																 verticalAlign="middle">																
															<s:Image width="90%" height="90%"
																	 source="@Embed('assets/iconinfo.png')">
																<fx:Script>
																	<![CDATA[
																		import mx.controls.Alert;
																	]]>
																</fx:Script>
															</s:Image>
														</mx:HBox>						
													</fx:Component>							
												</mx:headerRenderer>
												<mx:itemRenderer>
													<fx:Component>
														<mx:HBox width="{outerDocument.Documents_DG_Info.width}"
																 horizontalAlign="center"
																 verticalAlign="middle">							
															<fx:Script>
																<![CDATA[
																	import component.CustomTitleWindow;
																	
																	import mx.containers.TitleWindow;
																	import mx.core.FlexGlobals;
																	import mx.events.CloseEvent;
																	import mx.managers.PopUpManager;
																	//private var ttw:WmTitleWindows = new WmTitleWindows();	
																	private var ttw:WmTitleWindows = new WmTitleWindows();	
																	protected function image1_clickHandler(event:MouseEvent):void
																	{
																		ttw.addEventListener(CloseEvent.CLOSE,closePopup);
																		ttw.ld = data;
																		PopUpManager.addPopUp(ttw,FlexGlobals.topLevelApplication as DisplayObject,true);
																		PopUpManager.centerPopUp(ttw);
																		ttw.setData();
																		
																	}
																	
																	protected function closePopup(event:Event):void
																	{
																		PopUpManager.removePopUp(ttw);										
																	}
																	
																]]>
															</fx:Script>
															
															<s:Image width="90%" height="90%"
																	 click="image1_clickHandler(event)"
																	 source="@Embed('assets/iconinfo.png')">
																<fx:Script>
																	<![CDATA[
																		import mx.controls.Alert;
																	]]>
																</fx:Script>
															</s:Image>
														</mx:HBox>						
													</fx:Component>
												</mx:itemRenderer>
											</mx:AdvancedDataGridColumn>
											<!--itemRenderer="component.PriorityItemRenderer"-->
											<mx:AdvancedDataGridColumn id="Documents_DG_Priority"
																	   width="{(DGwidth-DGwidth)+45}"
																	   minWidth="45"
																	   dataField="Priority"
																	   draggable="false"
																	   headerText="Priority"
																	   itemRenderer="component.PopUpButtonItemRenderer_Priority"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Documents_DG_ID"
																	   width="190" dataField="ID"
																	   draggable="true"
																	   headerText="ID"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>	
											<mx:AdvancedDataGridColumn id="Documents_DG_Type"
																	   width="118" minWidth="120"
																	   color="red" dataField="Type"
																	   draggable="true"
																	   headerText="Type"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Documents_DG_Pages"
																	   width="60" minWidth="60"
																	   dataField="Pages"
																	   draggable="true"
																	   headerText="Pages"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Documents_DG_Docs"
																	   width="60" minWidth="60"
																	   dataField="Docs"
																	   draggable="true"
																	   headerText="Docs"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>					
											<mx:AdvancedDataGridColumn id="Documents_DG_Source"
																	   width="140" minWidth="140"
																	   dataField="Source"
																	   draggable="true"
																	   headerText="Source"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Documents_DG_Filename"
																	   width="80" minWidth="80"
																	   dataField="Filename"
																	   draggable="true"
																	   headerText="Filename"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Documents_DG_Status"
																	   width="200" minWidth="120"
																	   dataField="Status"
																	   draggable="true"
																	   headerText="Status"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Documents_DG_Started"
																	   width="{(DGwidth-DGwidth)+105}"
																	   minWidth="105"
																	   dataField="Started"
																	   draggable="true"
																	   headerText="Started"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Documents_DG_Completed"
																	   width="{(DGwidth-DGwidth)+105}"
																	   minWidth="105"
																	   dataField="Completed"
																	   draggable="true"
																	   headerText="% Completed"
																	   itemRenderer="component.CompletionBarItemRenderer"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Documents_DG_Estimate"
																	   width="{(DGwidth-DGwidth)+100}"
																	   minWidth="100"
																	   dataField="Estimate"
																	   draggable="true"
																	   headerText="Est. Completion"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Documents_DG_Deadline"
																	   width="{(DGwidth-DGwidth)+95}"
																	   minWidth="95                     "
																	   dataField="Deadline"
																	   draggable="true"
																	   headerText="Deadline"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
										</mx:columns>
									</mx:AdvancedDataGrid>
									
								</s:VGroup>
							</mx:Canvas>
							
						</component:CustomTitleWindow>
						
						<component:CustomTitleWindow id="DG_TW3_1" width="100%" height="100%"
													 borderVisible="true"
													 close="DG_TW3_1_closeHandler()"
													 dropShadowVisible="false" headerHeight="18"
													 skinClass="skin.CustomTitleWindowSkin"
													 title="Transactions Procedure 1">
							<mx:Canvas id="C31" x="0" width="100%" height="100%"
									   borderVisible="false" clipContent="true"
									   horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
								<s:VGroup id="VG31" height="{C31.height-15}"
										  clipAndEnableScrolling="true" gap="0" paddingBottom="0"
										  paddingLeft="0" paddingRight="0" paddingTop="0">
									
									<fx:Script>
										<![CDATA[
											[Bindable]
											private var Transactions_AC:ArrayCollection = new ArrayCollection(
												[
													{EntityType:"Transaction", Priority:"1", ID:"Transaction1ID", 
														WorkField1:"WorkField1Value", WorkField2:"WorkField2Value", WorkField3:"WorkField3Value", 
														WorkField4:"WorkField4Value", WorkField5:"WorkField5Value", Status:"StatusValue", 
														Started:"dd/mm/yyyy hh:mm", Completed:56, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"1",
														checked:false},
													{EntityType:"Transaction", Priority:"1", ID:"Transaction2ID", 
														WorkField1:"WorkField1Value", WorkField1:"WorkField2Value", WorkField3:"WorkField3Value", 
														WorkField3:"WorkField4Value", WorkField4:"WorkField5Value", Status:"StatusValue", 
														Started:"dd/mm/yyyy hh:mm", Completed:56, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"1",
														checked:false},
													{EntityType:"Transaction", Priority:"1", ID:"Transaction3ID", 
														WorkField1:"WorkField1Value", WorkField1:"WorkField2Value", WorkField3:"WorkField3Value", 
														WorkField3:"WorkField4Value", WorkField4:"WorkField5Value", Status:"StatusValue", 
														Started:"dd/mm/yyyy hh:mm", Completed:56, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"1",
														checked:false},
												]);
											
											[Bindable]
											private var TransactionObjects_AC:ArrayCollection = new ArrayCollection(
												[
													{EntityType:"Transaction", TransactionID:"Doc1ID", ThumbImage:"1T.png", Image:"1.png"},
													{EntityType:"Transaction", TransactionID:"Doc2ID", ThumbImage:"2T.png", Image:"2.png"},
													{EntityType:"Transaction", TransactionID:"Doc3ID", ThumbImage:"3T.png", Image:"3.png"}
												]);
										]]>
									</fx:Script>
									
									<!--Integrate this group into CustomTitleWindow component [David]-->
									<s:HGroup width="{DG_TW3_1.width}"
											  height="{DG_TW3_1.headerHeight}"
											  horizontalAlign="right" verticalAlign="baseline">
										<fx:Script>
											<![CDATA[
												[Bindable]
												private var Transactions_DG_tempwidth:Number;
												
												private function ShrinkExpandTransactions_DG(event:MouseEvent):void
												{
													//if (event.target.selected)
													if (TB31.selected)
													{
														TB31.label = 'Expand';
														Transactions_DG1.width = Transactions_DG_tempwidth;
												
													} else {
														TB31.label = 'Shrink';
														Transactions_DG_tempwidth = Transactions_DG1.width;
													}
												}
											]]>
										</fx:Script>
										<s:ToggleButton id="TB31" label="Shrink"
														click="ShrinkExpandTransactions_DG(event)"
														horizontalCenter="0"/>
									</s:HGroup>
									
									<mx:AdvancedDataGrid id="Transactions_DG1" width="{DGwidth}"
														 height="100%" borderVisible="false"
														 dataProvider="{Transactions_AC}"
														 doubleClickEnabled="true"
														 draggableColumns="true" headerHeight="20"
														 headerRelease="Batches_DG_headerReleaseHandler(event)"
														 headerStyleName="DataGridHeader"
														 horizontalScrollPolicy="off"
														 itemClose="dg_itemCloseHandler(event)"
														 itemDoubleClick="Transactions_DG_itemDoubleClickHandler(event)"
														 itemOpen="dg_itemOpenHandler(event)"
														 minColumnWidth="0" resizableColumns="true"
														 rowHeight="20" sortableColumns="true"
														 sortExpertMode="true"
														 styleName="DataGridBody"
														 verticalAlign="middle"
														 verticalScrollPolicy="off">
										<mx:columns>

											<mx:AdvancedDataGridColumn id="Transactions_DG1_Checkbox"
																	   width="{(DGwidth-DGwidth)+18}"
																	   dataField="checked"
																	   draggable="false"
																	   headerRenderer="component.ThreeStateCheckBoxHeaderRenderer"
																	   headerText=""
																	   itemRenderer="component.CheckBoxItemRenderer"
																	   rendererIsEditor="false"
																	   resizable="false"
																	   sortable="false"
																	   textAlign="center"/>

											<mx:AdvancedDataGridColumn id="Transactions_DG1_Info"
																	   width="{(DGwidth-DGwidth)+18}"
																	   dataField="Information"
																	   draggable="false"
																	   resizable="false"
																	   sortable="false"
																	   textAlign="center">

												<mx:headerRenderer>
													<fx:Component>
														<mx:HBox width="{outerDocument.Transactions_DG1_Info.width}"
																 horizontalAlign="center"
																 verticalAlign="middle">																
															<s:Image width="90%" height="90%"
																	 source="@Embed('assets/iconinfo.png')">

																<fx:Script>
																	<![CDATA[
																		import mx.controls.Alert;
																	]]>
																</fx:Script>
															</s:Image>
														</mx:HBox>						
													</fx:Component>							
												</mx:headerRenderer>
												<mx:itemRenderer>
													<fx:Component>
														<mx:HBox width="{outerDocument.Transactions_DG1_Info.width}"
																 horizontalAlign="center"
																 verticalAlign="middle">							
															<fx:Script>
																<![CDATA[
																	import component.CustomTitleWindow;
																	
																	import mx.containers.TitleWindow;
																	import mx.core.FlexGlobals;
																	import mx.events.CloseEvent;
																	import mx.managers.PopUpManager;
																	//private var ttw:WmTitleWindows = new WmTitleWindows();	
																	private var ttw:WmTitleWindows = new WmTitleWindows();	
																	
																	protected function image1_clickHandler(event:MouseEvent):void
																	{
																		ttw.addEventListener(CloseEvent.CLOSE,closePopup);
																		ttw.ld = data;
																		PopUpManager.addPopUp(ttw,FlexGlobals.topLevelApplication as DisplayObject,true);
																		PopUpManager.centerPopUp(ttw);
																		ttw.setData();
																		
																	}
																	
																	protected function closePopup(event:Event):void
																	{
																		PopUpManager.removePopUp(ttw);										
																	}
																	
																]]>
															</fx:Script>
															
															<s:Image width="90%" height="90%"
																	 click="image1_clickHandler(event)"
																	 source="@Embed('assets/iconinfo.png')">
																<fx:Script>
																	<![CDATA[
																		import mx.controls.Alert;
																	]]>
																</fx:Script>
															</s:Image>
														</mx:HBox>						
													</fx:Component>
												</mx:itemRenderer>
											</mx:AdvancedDataGridColumn>
											<!--itemRenderer="component.PriorityItemRenderer"-->
											<mx:AdvancedDataGridColumn id="Transactions_DG1_Priority"
																	   width="{(DGwidth-DGwidth)+45}"
																	   minWidth="45"
																	   dataField="Priority"
																	   draggable="false"
																	   headerText="Priority"
																	   itemRenderer="component.PopUpButtonItemRenderer_Priority"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG1_ID"
																	   width="190" dataField="ID"
																	   draggable="true"
																	   headerText="ID"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>	
											<mx:AdvancedDataGridColumn id="Transactions_DG1_Field1"
																	   width="100" minWidth="100"
																	   dataField="WorkField1"
																	   draggable="true"
																	   headerText="WorkField1"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG1_Field2"
																	   width="100" minWidth="100"
																	   dataField="WorkField2"
																	   draggable="true"
																	   headerText="WorkField2"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG1_Field3"
																	   width="100" minWidth="100"
																	   dataField="WorkField3"
																	   draggable="true"
																	   headerText="WorkField3"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG1_Field4"
																	   width="100" minWidth="100"
																	   dataField="WorkField4"
																	   draggable="true"
																	   headerText="WorkField4"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG1_Field5"
																	   width="100" minWidth="100"
																	   dataField="WorkField5"
																	   draggable="true"
																	   headerText="WorkField5"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG1_Status"
																	   width="200" minWidth="120"
																	   dataField="Status"
																	   draggable="true"
																	   headerText="Status"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG1_Started"
																	   width="{(DGwidth-DGwidth)+105}"
																	   minWidth="105"
																	   dataField="Started"
																	   draggable="true"
																	   headerText="Started"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG1_Completed"
																	   width="{(DGwidth-DGwidth)+105}"
																	   minWidth="105"
																	   dataField="Completed"
																	   draggable="true"
																	   headerText="% Completed"
																	   itemRenderer="component.CompletionBarItemRenderer"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG1_Estimate"
																	   width="{(DGwidth-DGwidth)+100}"
																	   minWidth="100"
																	   dataField="Estimate"
																	   draggable="true"
																	   headerText="Est. Completion"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG1_Deadline"
																	   width="{(DGwidth-DGwidth)+95}"
																	   minWidth="95"
																	   dataField="Deadline"
																	   draggable="true"
																	   headerText="Deadline"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
										</mx:columns>
									</mx:AdvancedDataGrid>
									
								</s:VGroup>
							</mx:Canvas>						
						</component:CustomTitleWindow>

						<component:CustomTitleWindow id="DG_TW3_2" width="100%" height="100%"
													 borderVisible="true"
													 close="DG_TW3_2_closeHandler()"
													 dropShadowVisible="false" headerHeight="18"
													 skinClass="skin.CustomTitleWindowSkin"
													 title="Transactions Procedure 2">
							<mx:Canvas id="C32" x="0" width="100%" height="100%"
									   borderVisible="false" clipContent="true"
									   horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
								<s:VGroup id="VG32" height="{C32.height-15}"
										  clipAndEnableScrolling="true" gap="0" paddingBottom="0"
										  paddingLeft="0" paddingRight="0" paddingTop="0">
									
									<fx:Script>
										<![CDATA[
											[Bindable]
											private var Transactions_AC2:ArrayCollection = new ArrayCollection(
												[
													{EntityType:"Transaction", Priority:"1", ID:"Transaction1ID", 
														WorkField1:"WorkField1Value", WorkField2:"WorkField2Value", WorkField3:"WorkField3Value", 
														WorkField4:"WorkField4Value", WorkField5:"WorkField5Value", Status:"StatusValue", 
														Started:"dd/mm/yyyy hh:mm", Completed:56, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"1",
														checked:false},
													{EntityType:"Transaction", Priority:"1", ID:"Transaction2ID", 
														WorkField1:"WorkField1Value", WorkField1:"WorkField2Value", WorkField3:"WorkField3Value", 
														WorkField3:"WorkField4Value", WorkField4:"WorkField5Value", Status:"StatusValue", 
														Started:"dd/mm/yyyy hh:mm", Completed:56, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"1",
														checked:false},
													{EntityType:"Transaction", Priority:"1", ID:"Transaction3ID", 
														WorkField1:"WorkField1Value", WorkField1:"WorkField2Value", WorkField3:"WorkField3Value", 
														WorkField3:"WorkField4Value", WorkField4:"WorkField5Value", Status:"StatusValue", 
														Started:"dd/mm/yyyy hh:mm", Completed:56, Estimate:"dd/mm/yyyy hh:mm", Deadline:"dd/mm/yyyy", FormID:"1",
														checked:false},
												]);
											
											[Bindable]
											private var TransactionObjects_AC2:ArrayCollection = new ArrayCollection(
												[
													{EntityType:"Transaction", TransactionID:"Doc1ID", ThumbImage:"1T.png", Image:"1.png"},
													{EntityType:"Transaction", TransactionID:"Doc2ID", ThumbImage:"2T.png", Image:"2.png"},
													{EntityType:"Transaction", TransactionID:"Doc3ID", ThumbImage:"3T.png", Image:"3.png"}
												]);
										]]>
									</fx:Script>
									
									<!--Integrate this group into CustomTitleWindow component [David]-->
									<s:HGroup width="{DG_TW3_2.width}"
											  height="{DG_TW3_2.headerHeight}"
											  horizontalAlign="right" verticalAlign="baseline">
										<fx:Script>
											<![CDATA[
												[Bindable]
												//private var Transactions_DG_tempwidth:Number;
												
												private function ShrinkExpandTransactions_DG2(event:MouseEvent):void
												{
													//if (event.target.selected)
													//if (TB32.selected)
													//{
													//	TB32.label = 'Expand';
													//	Transactions_DG2.width = Transactions_DG_tempwidth;
														
													//} else {
													//	TB32.label = 'Shrink';
													//	Transactions_DG_tempwidth = Transactions_DG2.width;
													//}
												}
											]]>
										</fx:Script>
										<s:ToggleButton id="TB32" label="Shrink"
														click="ShrinkExpandTransactions_DG2(event)"
														horizontalCenter="0"/>
									</s:HGroup>
									
									<mx:AdvancedDataGrid id="Transactions_DG2" width="{DGwidth}"
														 height="100%" borderVisible="false"
														 dataProvider="{Transactions_AC}"
														 doubleClickEnabled="true"
														 draggableColumns="true" headerHeight="20"
														 headerRelease="Batches_DG_headerReleaseHandler(event)"
														 headerStyleName="DataGridHeader"
														 horizontalScrollPolicy="off"
														 itemClose="dg_itemCloseHandler(event)"
														 itemDoubleClick="advanceddatagrid_itemDoubleClickHandler(event)"
														 itemOpen="dg_itemOpenHandler(event)"
														 minColumnWidth="0" resizableColumns="true"
														 rowHeight="20" sortableColumns="true"
														 sortExpertMode="true"
														 styleName="DataGridBody"
														 verticalAlign="middle"
														 verticalScrollPolicy="off">
										<mx:columns>
											<mx:AdvancedDataGridColumn id="Transactions_DG2_Checkbox"
																	   width="{(DGwidth-DGwidth)+18}"
																	   dataField="checked"
																	   draggable="false"
																	   headerRenderer="component.ThreeStateCheckBoxHeaderRenderer"
																	   headerText=""
																	   itemRenderer="component.CheckBoxItemRenderer"
																	   rendererIsEditor="false"
																	   resizable="false"
																	   sortable="false"
																	   textAlign="center"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG2_Info"
																	   width="{(DGwidth-DGwidth)+18}"
																	   dataField="Information"
																	   draggable="false"
																	   resizable="false"
																	   sortable="false"
																	   textAlign="center">
												<mx:headerRenderer>
													<fx:Component>
														<mx:HBox width="{outerDocument.Transactions_DG2_Info.width}"
																 horizontalAlign="center"
																 verticalAlign="middle">																
															<s:Image width="90%" height="90%"
																	 source="@Embed('assets/iconinfo.png')">
																<fx:Script>
																	<![CDATA[
																		import mx.controls.Alert;
																	]]>
																</fx:Script>
															</s:Image>
														</mx:HBox>						
													</fx:Component>							
												</mx:headerRenderer>
												<mx:itemRenderer>
													<fx:Component>
														<mx:HBox width="{outerDocument.Transactions_DG2_Info.width}"
																 horizontalAlign="center"
																 verticalAlign="middle">							
															<fx:Script>
																<![CDATA[
																	import component.CustomTitleWindow;
																	
																	import mx.containers.TitleWindow;
																	import mx.core.FlexGlobals;
																	import mx.events.CloseEvent;
																	import mx.managers.PopUpManager;
																	//private var ttw:WmTitleWindows = new WmTitleWindows();	
																	private var ttw:WmTitleWindows = new WmTitleWindows();	
																	protected function image1_clickHandler(event:MouseEvent):void
																	{
																		ttw.addEventListener(CloseEvent.CLOSE,closePopup);
																		ttw.ld = data;
																		PopUpManager.addPopUp(ttw,FlexGlobals.topLevelApplication as DisplayObject,true);
																		PopUpManager.centerPopUp(ttw);
																		ttw.setData();
																		
																	}
																	
																	protected function closePopup(event:Event):void
																	{
																		PopUpManager.removePopUp(ttw);										
																	}
																	
																]]>
															</fx:Script>
															
															<s:Image width="90%" height="90%"
																	 click="image1_clickHandler(event)"
																	 source="@Embed('assets/iconinfo.png')">
																<fx:Script>
																	<![CDATA[
																		import mx.controls.Alert;
																	]]>
																</fx:Script>
															</s:Image>
														</mx:HBox>						
													</fx:Component>
												</mx:itemRenderer>
											</mx:AdvancedDataGridColumn>
											<!--itemRenderer="component.PriorityItemRenderer"-->
											<mx:AdvancedDataGridColumn id="Transactions_DG2_Priority"
																	   width="{(DGwidth-DGwidth)+45}"
																	   minWidth="45"
																	   dataField="Priority"
																	   draggable="false"
																	   headerText="Priority"
																	   itemRenderer="component.PopUpButtonItemRenderer_Priority"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG2_ID"
																	   width="190" dataField="ID"
																	   draggable="true"
																	   headerText="ID"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>	
											<mx:AdvancedDataGridColumn id="Transactions_DG2_Field1"
																	   width="100" minWidth="100"
																	   dataField="WorkField1"
																	   draggable="true"
																	   headerText="WorkField1"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG2_Field2"
																	   width="100" minWidth="100"
																	   dataField="WorkField2"
																	   draggable="true"
																	   headerText="WorkField2"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG2_Field3"
																	   width="100" minWidth="100"
																	   dataField="WorkField3"
																	   draggable="true"
																	   headerText="WorkField3"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG2_Field4"
																	   width="100" minWidth="100"
																	   dataField="WorkField4"
																	   draggable="true"
																	   headerText="WorkField4"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG2_Field5"
																	   width="100" minWidth="100"
																	   dataField="WorkField5"
																	   draggable="true"
																	   headerText="WorkField5"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG2_Status"
																	   width="200" minWidth="120"
																	   dataField="Status"
																	   draggable="true"
																	   headerText="Status"
																	   resizable="true"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG2_Started"
																	   width="{(DGwidth-DGwidth)+105}"
																	   minWidth="105"
																	   dataField="Started"
																	   draggable="true"
																	   headerText="Started"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG2_Completed"
																	   width="{(DGwidth-DGwidth)+105}"
																	   minWidth="105"
																	   dataField="Completed"
																	   draggable="true"
																	   headerText="% Completed"
																	   itemRenderer="component.CompletionBarItemRenderer"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG2_Estimate"
																	   width="{(DGwidth-DGwidth)+100}"
																	   minWidth="100"
																	   dataField="Estimate"
																	   draggable="true"
																	   headerText="Est. Completion"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
											<mx:AdvancedDataGridColumn id="Transactions_DG2_Deadline"
																	   width="{(DGwidth-DGwidth)+95}"
																	   minWidth="95"
																	   dataField="Deadline"
																	   draggable="true"
																	   headerText="Deadline"
																	   resizable="false"
																	   sortable="true"
																	   textAlign="left"/>
										</mx:columns>
									</mx:AdvancedDataGrid>
									
								</s:VGroup>
							</mx:Canvas>						
						</component:CustomTitleWindow>
						
					<!--End of datagrids-->
					</mx:VDividedBox>
					
					<!--Control buttons-->
					<s:BorderContainer width="100%" height="24" borderVisible="false">
						<s:layout>
							<s:HorizontalLayout horizontalAlign="right" verticalAlign="middle"/>
						</s:layout>
						
						<s:Button height="21" label="Start" buttonMode="true" styleName="startButton"/>
						<s:Button height="21" label="Open" buttonMode="true" styleName="openButton"/>
						<s:Button height="21" label="Close" buttonMode="true" styleName="closeButton"/>
						<s:Button height="21" label="Suspend" buttonMode="true"
								  styleName="suspendButton"/>
						<s:Button height="21" label="Resume" buttonMode="true"
								  styleName="resumeButton"/>
						<s:Button height="21" label="Escalate" buttonMode="true"
								  styleName="escalateButton"/>
						<s:Button height="21" label="Reassign" buttonMode="true"
								  styleName="reassignButton"/>
						<s:Button height="21" label="Restart" buttonMode="true"
								  styleName="restartButton"/>
						<s:Button height="21" label="Delete" buttonMode="true"
								  styleName="deleteButton"/>
					</s:BorderContainer>
					
				</s:BorderContainer>
				
				<!--End BoxesAndResults-->
			</s:BorderContainer>
			
			<!--End stage-->
		</s:BorderContainer>
		
	</s:BorderContainer>
</mx:Canvas>