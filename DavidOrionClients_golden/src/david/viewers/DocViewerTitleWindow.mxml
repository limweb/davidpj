<?xml version="1.0" encoding="utf-8"?>
<component:CustomTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
							 xmlns:s="library://ns.adobe.com/flex/spark"
							 xmlns:mx="library://ns.adobe.com/flex/mx"
							 xmlns:component="component.*"
							 xmlns:panzoom="org.rockholla.controls.panzoom.*"
							 width="{ImageWindow.width}"
							 height="{ImageWindow.height}" 
							 headerHeight="16"
							 borderVisible="true"
							 dropShadowVisible="false" 
							 title="Image ID {DocumentID}"
							 skinClass="skin.CustomTitleWindowSkin"
							 close="customtitlewindow1_closeHandler(event)"
							 windowMoving="customtitlewindow1_windowMovingHandler(event)">
<!--
minWidth="{panzoom.minWidth}"
minHeight="{ImageWindow.minHeight}"
maxWidth="{panzoom.maxWidth}"
maxHeight="{ImageWindow.maxHeight}"-->
	<fx:Script>
		<![CDATA[
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.TitleWindowBoundsEvent;
			[Bindable] public var ImageName:String;
			
//			[Bindable] public var testImage:Object = 'assets/1.png';
			[Bindable] public var DocumentID:String;	
			[Bindable] public var LeftArrow:String = "<";
			[Bindable] public var RightArrow:String = ">";
			
//			[Bindable] [Embed(source="assets/1.png")]
//			public var image1:Class;
//			[Bindable] [Embed(source="assets/1T.png")]
//			public var image1T:Class;
//			[Bindable] [Embed(source="assets/2.png")]
//			public var image2:Class;
//			[Bindable] [Embed(source="assets/2T.png")]
//			public var image2T:Class;
//			[Bindable] [Embed(source="assets/3.png")]
//			public var image3:Class;
//			[Bindable] [Embed(source="assets/3T.png")]
//			public var image3T:Class;
//			[Bindable] [Embed(source="assets/4.png")]
//			public var image4:Class;
//			[Bindable] [Embed(source="assets/4T.png")]
//			public var image4T:Class;
			
			protected function customtitlewindow1_closeHandler(event:CloseEvent):void
			{
				// TODO Auto-generated method stub
				PopUpManager.removePopUp(this);
			}

			protected function HandleImageDoubleClick(mouseEvent):void
			{
				if(this.panzoom.scale == 1.8 || ImageZoomSlider.value == 180)
				{
					ImageZoomSlider.value = 100;
					this.panzoom.zoomToPoint(new Point(0, 0), 1);
					this.panzoom.scale = 1;
				}
				else
				{
					ImageZoomSlider.value = 180;
					this.panzoom.zoomToPoint(new Point(325, 400), 1.8);
					this.panzoom.scale = 1.8;
				}
			}
			
			// When our slider changes, we want the zoom level to update.  There's a public zoom method
			// within the PanZoomComponent that accepts a scale value (1 = actual size or 100%, 0.5 = half the size or 50%, etc.)
			protected function ImageZoomSliderChangeEventHandler(change):void
			{
				//	this.panzoom.zoom(ImageZoomSlider.value/100);
				this.panzoom.scale = ImageZoomSlider.value/100;
			}
			
			protected function customtitlewindow1_windowMovingHandler(evt:TitleWindowBoundsEvent):void
			{
				// TODO Auto-generated method stub
				if (evt.afterBounds.left < 0) {
					evt.afterBounds.left = 0;
				} else if (evt.afterBounds.right > systemManager.stage.stageWidth) {
					evt.afterBounds.left = systemManager.stage.stageWidth - evt.afterBounds.width;
				}
				if (evt.afterBounds.top < 0) {
					evt.afterBounds.top = 0;
				} else if (evt.afterBounds.bottom > systemManager.stage.stageHeight) {
					evt.afterBounds.top = systemManager.stage.stageHeight - evt.afterBounds.height;
				}				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Image is set here -->
<!--		<s:BitmapImage id="PNGImage" source="{testImage}"/>-->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" gap="0">
		
		<s:BorderContainer id="ImageWindow" width="{panzoom.width}" height="{panzoom.height}" borderStyle="solid" borderVisible="false" dropShadowVisible="false">
			<s:layout>
				<s:BasicLayout/>
			</s:layout>
			
			<panzoom:PanZoomComponent id="panzoom" 
									  x="0" y="0" width="336" height="475"
									  minWidth="150" minHeight="200" maxWidth="400" maxHeight="400"
									  borderStyle="solid" borderVisible="true" backgroundColor="0x807F7A" borderColor="black"
									  childPreventsPan="false" 
									  scaleMax="600" scaleMin="1" initialZoomLevel="1.8" loadCenterPoint="{new Point(325, 400)}"
									  panScrollBarsVisible="true" horizontalScrollPolicy="off" verticalScrollPolicy="off" 
									  zoomSpeed="1" zoomToCursor="false">
				<!--zoom="this._onZoom()"-->
				<panzoom:PanZoomContent width="336" height="100" minWidth="150" minHeight="200" maxWidth="400" maxHeight="400" 
										backgroundColor="0x000000" borderVisible="true" dropShadowVisible="false">
					<s:Image id="DocImage" 
							 width="336" height="100" depth="1"
							 doubleClickEnabled="true" doubleClick="HandleImageDoubleClick(event)"
							 smooth="false" smoothingQuality="default"
							 source="assets/{ImageName}" >
					</s:Image>
							 <!--source="{PNGImage.source}">-->
					<!--doubleClick="{this.panzoom.scale=1}"/-->
				</panzoom:PanZoomContent>
			</panzoom:PanZoomComponent>	
		</s:BorderContainer>
		
		<s:BorderContainer id="Thumbs" 
						   width="100%" height="50" borderVisible="false" dropShadowVisible="false">
			<s:layout>
				<s:HorizontalLayout horizontalAlign="center" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" gap="0" />
			</s:layout>
			<s:BorderContainer width="20" height="50" borderVisible="false">
				<s:layout>
					<s:VerticalLayout horizontalAlign="center" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" gap="0"/>
				</s:layout>
				<s:BorderContainer width="20" height="35" backgroundColor="black" chromeColor="green" borderVisible="false">
					<s:layout>
						<s:HorizontalLayout horizontalAlign="center" verticalAlign="top"/>
					</s:layout>
					<s:VSlider id="ImageZoomSlider" showDataTip="false"
							   height="18"
							   liveDragging="true" 
							   value="100" maximum="600" minimum="100" stepSize="100" snapInterval="1"
							   change="ImageZoomSliderChangeEventHandler(event)"/>
				</s:BorderContainer>
				<s:BorderContainer width="20" height="15" backgroundColor="red" chromeColor="red" borderVisible="true" borderColor="red" buttonMode="true">
					<s:layout>
						<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle"/>
					</s:layout>
					<s:Label text="{LeftArrow}"
							 fontFamily="Arial Black" fontSize="12"/>
				</s:BorderContainer>
			</s:BorderContainer>
			
			<s:BorderContainer width="100%" backgroundColor="gray" borderVisible="true" borderColor="gray">
				<s:layout>
					<s:HorizontalLayout/>
				</s:layout>
				<s:List width="100%" height="50" borderVisible="false" chromeColor="gray"
						horizontalCenter="0"
						itemRenderer="spark.skins.spark.DefaultComplexItemRenderer"
						verticalCenter="-3" verticalScrollPolicy="off">
					<s:layout>
						<s:TileLayout columnWidth="50" rowHeight="{Thumbs.height}"
									  requestedColumnCount="5" requestedRowCount="1" columnAlign="justifyUsingGap" rowAlign="justifyUsingGap"
									  paddingTop="2" paddingBottom="2" paddingLeft="2" paddingRight="2" horizontalGap="2" verticalGap="0"/>		
					</s:layout>
					<s:dataProvider>
						<s:ArrayList>
							<s:Image width="100%" height="100%" fillMode="scale" scaleMode="stretch"
									 source="assets/1.png"/>							
							<s:Image width="100%" height="100%" fillMode="scale" scaleMode="stretch"
									 source="assets/2.png"/>
							<s:Image width="100%" height="100%" fillMode="scale" scaleMode="stretch"
									 source="assets/3.png"/>
						</s:ArrayList>		
					</s:dataProvider>
				</s:List>
			</s:BorderContainer>
			
			<s:BorderContainer width="20" height="50" borderVisible="false">
				<s:layout>
					<s:VerticalLayout horizontalAlign="center" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" gap="0"/>
				</s:layout>
				<s:BorderContainer width="20" height="35" backgroundColor="black" chromeColor="green" borderVisible="false">
					<s:layout>
						<s:HorizontalLayout horizontalAlign="center" verticalAlign="top"/>
					</s:layout>
					<s:VSlider id="ThumbsZoomSlider" showDataTip="false"
							   height="18" 
							   liveDragging="true"/>
				</s:BorderContainer>
				<s:BorderContainer width="20" height="15" backgroundColor="red" chromeColor="red" borderVisible="true" borderColor="red" buttonMode="true">
					<s:layout>
						<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle"/>
					</s:layout>
					<s:Label text="{RightArrow}"
							 fontFamily="Arial Black" fontSize="12"/>
				</s:BorderContainer>
			</s:BorderContainer>
		</s:BorderContainer>
		
	</s:VGroup>	
</component:CustomTitleWindow>