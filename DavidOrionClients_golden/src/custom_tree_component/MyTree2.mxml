<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:components="components.*" 
		 creationComplete="group1_creationCompleteHandler(event)" >
		
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			[Bindable] [Embed(source="../assets/collapse.png")]
			public var ICON_PLUS:Class;
			
			[Bindable] [Embed(source="../assets/expand.png")]
			public var ICON_MINUS:Class;
			
			[Bindable] [Embed(source="../assets/folder_close.png")]
			public var ICON_FOLDER:Class;
			
			[Bindable] [Embed(source="../assets/file.png")]
			public var ICON_FILE:Class;
			
			[Bindable] [Embed(source="../assets/folder_collapse.png")]
			public var ICON_FOLDER_COLLAPSE:Class;
			
			[Bindable] [Embed(source="../assets/folder_expand.png")]
			public var ICON_FOLDER_EXPAND:Class;
			
			/* [Bindable] [Embed(source="../assets/folder_blue_checked.png")]
			public var ICON_FOLDER_BLUE_CHECKED:Class;
			
			[Bindable] [Embed(source="../assets/folder_blue_unchecked.png")]
			public var ICON_FOLDER_BLUE_UNCHECKED:Class;
			
			[Bindable] [Embed(source="../assets/folder_green_checked.png")]
			public var ICON_FOLDER_GREEN_CHECKED:Class;
			
			[Bindable] [Embed(source="../assets/folder_green_unchecked.png")]
			public var ICON_FOLDER_GREEN_UNCHECKED:Class;
			
			[Bindable] [Embed(source="../assets/folder_orange_checked.png")]
			public var ICON_FOLDER_ORANGE_CHECKED:Class;
			
			[Bindable] [Embed(source="../assets/folder_orange_unchecked.png")]
			public var ICON_FOLDER_ORANGE_UNCHECKED:Class;
			
			[Bindable] [Embed(source="../assets/folder_purple_checked.png")]
			public var ICON_FOLDER_PURPLE_CHECKED:Class;
			
			[Bindable] [Embed(source="../assets/folder_purple_unchecked.png")]
			public var ICON_FOLDER_PURPLE_UNCHECKED:Class;
			
			[Bindable] [Embed(source="../assets/folder_red_checked.png")]
			public var ICON_FOLDER_RED_CHECKED:Class;
			
			[Bindable] [Embed(source="../assets/folder_red_unchecked.png")]
			public var ICON_FOLDER_RED_UNCHECKED:Class;
			
			[Bindable] [Embed(source="../assets/folder_yellow_checked.png")]
			public var ICON_FOLDER_YELLOW_CHECKED:Class;
			
			[Bindable] [Embed(source="../assets/folder_yellow_unchecked.png")]
			public var ICON_FOLDER_YELLOW_UNCHECKED:Class; */
			
			
			[Bindable] [Embed(source="../assets/folder_yellow_checked.png")]
			public var ICON_FOLDER_CHECKED:Class;
			
			[Bindable] [Embed(source="../assets/folder_yellow_unchecked.png")]
			public var ICON_FOLDER_UNCHECKED:Class;
			
			
			private var chk:Boolean = false;
			static private var STATE_SCHRODINGER:String="schrodinger";
			static private var STATE_CHECKED:String="checked";
			static private var STATE_UNCHECKED:String="unchecked";
			
			private var orgXML:XML =
				<root>
						<node id='1' name='Folder1' label='Folder1' state='checked' open='no' p='1'>
							<node id='2' name='Subfolder11' label='Subfolder11' state='checked' open='no' p='0'/>
							<node id='3' name='Subfolder12' label='Subfolder12' state='checked' open='no' p='0'/>
							<node id='4' name='Subfolder13' label='Subfolder13' state='checked' open='no' p='0'/>
						</node>
						<node id='5' name='Folder2' label='Folder2' state='checked' open='no' p='1'>
							<node id='6' name='Subfolder21' label='Subfolder21' state='checked' open='no' p='0'/>
						</node>
						<node id='7' name='Folder3' label='Folder3' state='checked' open='no' p='1'>
							<node id='8' name='Subfolder31' label='Subfolder31' state='checked' open='no' p='0'/>
							<node id='9' name='Subfolder32' label='Subfolder32' state='checked' open='no' p='0'/>
						</node>
				</root>;
				
			[Bindable] private var xl1:XMLListCollection = new XMLListCollection();
			[Bindable] private var chkstate:String = "checked";
			[Bindable] public var isClickFromChkBoxchkBox:Boolean = false;
			[Bindable] private var tempTreeVerticalScrollPosition:Number = 0;
			
			private var cpa:String ="P";
			
			protected function treeview(apc:String):void {
				if ( apc == 'P' ) {
					var tc:XMLListCollection = new XMLListCollection();
					var dp:XML = orgXML.copy();
					var xl:XMLList = dp.node;
					
					for each( var nodelist:XML in xl ) {
						for (var i:int=nodelist.node.length()-1; i>=0; i--) {
							if(nodelist.node[i].@state == "unchecked"){
								delete nodelist.node[i];
							}
						}
						if(nodelist.node.length() > 0 ){
							tc.addItem(nodelist);
						}
					}
					xl1 = tc;
					treeid.dataProvider = xl1;
					
				} else if ( apc == "A" ) {
					xl1.removeAll();
					var dp:XML = orgXML.copy();
					xl1 = new XMLListCollection( new XMLList( dp.node ) );	
					treeid.dataProvider = xl1;
				}
				cpa = apc;
				//treeid.openItems = dp.node;
				treeid.invalidateList();
				treeid.invalidateDisplayList();
				
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void {
				treeview('A');
				//Add click event for tree
				//treeid.addEventListener(ListEvent.ITEM_CLICK, treeidItemClickHandler );
			}
			
			/* public function swapTreeClickToDBClickHandler():void {
				treeid.removeEventListener(ListEvent.ITEM_CLICK, treeidItemClickHandler);
				treeid.addEventListener(ListEvent.ITEM_DOUBLE_CLICK, treeid_itemDoubleClickHandler);
			} */
			
			/* private function treeidItemClickHandler(event:ListEvent):void {
				if ( FlexGlobals.topLevelApplication.documentExplorerID.mainDetailBoxFlag == "I" ) {
					FlexGlobals.topLevelApplication.documentExplorerID.setVisibleMainDetailBox("S");
				}
			} */
			
			protected function treeid_itemDoubleClickHandler(event:ListEvent):void {
				var p:XML = event.target.selectedItem as XML;
				
				if ( FlexGlobals.topLevelApplication.documentExplorerID.mainDetailBoxFlag == "I" ) {
					FlexGlobals.topLevelApplication.documentExplorerID.setVisibleMainDetailBox("S");
					
					isClickFromChkBoxchkBox = false;
					updateTree(p);
				
				} else {
					//var p:XML = event.target.selectedItem as XML;
					isClickFromChkBoxchkBox = false;
					updateTree(p);
				}
			}
			
			private function updateTree(p:XML):void {
				if ( p.@open=='yes' ) { //Close
					renderTree(updateTreeOpenCloseState("close", p.@name));
					setTimeout(setTreeVerticalScrollPosition,100);
					FlexGlobals.topLevelApplication.documentExplorerID.closeDataGridWindow(p.@name);								
					
				} else { //Open
					renderTree(updateTreeOpenCloseState("open", p.@name));
					setTimeout(setTreeVerticalScrollPosition,100);
					FlexGlobals.topLevelApplication.documentExplorerID.openDataGridWindow(p.@name);								
				}
			}
			
			//20131222 give method in DE.mxmal call to change folder state
			public function updateTreeFromCloseEvent(closeBoxName:String):void {
				isClickFromChkBoxchkBox = false;
				renderTree(updateTreeOpenCloseState("close", closeBoxName));
				setTimeout(setTreeVerticalScrollPosition,100);
				FlexGlobals.topLevelApplication.documentExplorerID.closeDataGridWindow(closeBoxName);
			}
			
			private function updateTreeOpenCloseState(state:String, chkName:String):ArrayCollection {
				var arrayReturn:ArrayCollection = new ArrayCollection();
				var tc:XMLListCollection = new XMLListCollection();
				var treeidDPTemp:XMLListCollection = treeid.dataProvider as XMLListCollection; 
				var xl:XMLList = new XMLList(treeidDPTemp.toXMLString());
				
				//Loop for change data
				for each( var nodelist:XML in xl ) {
					for (var i:int=nodelist.length()-1; i>=0; i--) {
						if(nodelist[i].@name == chkName){
							if ( state == "open" ) {
								nodelist[i].@open = 'yes';
							} else {
								nodelist[i].@open = 'no';
								/* for ( var j:int=nodelist.node.length()-1; j>=0; j-- ) {
									nodelist.node[j].@open = 'no';
								} */
							}
							break;
							
						} else {
							for ( var j:int=nodelist.node.length()-1; j>=0; j-- ) {
								if(nodelist.node[j].@name == chkName) {
									if ( state == "open" ) {
										nodelist.node[j].@open = 'yes';
									} else {
										nodelist.node[j].@open = 'no';
									}
									break;
								}
							}
						}
					}
					if(nodelist.node.length() > 0 ){
						tc.addItem(nodelist);
					}
				}
				
				//Set verticalScrollPosition to global variable (before change)
				tempTreeVerticalScrollPosition = treeid.verticalScrollPosition;
				
				xl1 = tc;
				treeid.dataProvider = xl1;
				treeid.invalidateList();
				treeid.invalidateDisplayList();
				//treeid.validateNow();
				
				//Loop for update expands index
				var temp:XMLListCollection = treeid.dataProvider as XMLListCollection; 
				var xlz:XMLList = new XMLList(temp.toXMLString());
				var a:int=0;
				for each( var nodelist:XML in xlz ) {
					if ( nodelist.@open == 'yes' ) {
						arrayReturn.addItem(a);
					} else {
						for ( var j:int=nodelist.node.length()-1; j>=0; j-- ) {
							if(nodelist.node[j].@open == 'yes') {
								arrayReturn.addItem(a);
								break;
							}
						}
					}
					a++;
				}
				
				return arrayReturn;
      		}
				
			//Re render tree after change node open state
			public function renderTree(listExpands:ArrayCollection):void {
				//for (var i:int=0; i < treeid.dataProvider.length; i++) {
				//	treeid.expandChildrenOf(treeid.dataProvider[i],false);
				//}
				
				treeid.openItems = [];
				
				for each ( var index:int in listExpands ) {
					for (var i:int = 0; i < treeid.dataProvider.length; i ++) {
						if ( index == i ) {
							treeid.expandChildrenOf(treeid.dataProvider[i],true);
							break;
						}
					}
				}
				
				//if not have expand node in tree switch to landing page
				if ( listExpands.length == 0 ) {
					FlexGlobals.topLevelApplication.documentExplorerID.setVisibleMainDetailBox("I");
				}
			}
			
			private function setTreeVerticalScrollPosition():void {
				treeid.verticalScrollPosition = tempTreeVerticalScrollPosition;
				tempTreeVerticalScrollPosition = 0;
			}
			
			private function updatechild(x:XMLList,status:String):Boolean {
				var chk:Boolean = true;
				for each (var item:XML in x.node) {	
					if(	item.@state == STATE_UNCHECKED ) {
						chk = false;
						break;
					}
				}
				return chk;
			}
	
			private function expandNodes():void {
				treeview(cpa);
				for (var i:int = 0; i < treeid.dataProvider.length; i ++){
					treeid.expandChildrenOf(treeid.dataProvider[i],true)
				}
			}
			
			private function tree_iconFunc(item:Object):Class {
				var iconClass:Class;
				var opened:String = XML(item).attribute('open');
				
				if ( opened == "yes" ) {
					iconClass = ICON_FOLDER_CHECKED;
				} else {
					iconClass = ICON_FOLDER_UNCHECKED;
				}
				
				return iconClass;
			}
			
			/* private function updateTree(p:XML):void {
			var ancestorID:int = 0;
			var selectid:String = p.@id ;
			
			var textAlert:String = "";
			
			textAlert += "p.@id : " + p.@p;
			
			//parent
			if(p.@p=='1'){
			var node:XMLList = orgXML.node.(@id == selectid );
			node.@state = p.@state;
			
			for each (var item in node.node) {
			item.@state = p.@state;
			}					
			
			//child
			} else {
			var node:XMLList = orgXML.node.node.(@id == selectid );
			node.@state = p.@state;
			
			for each( var nodelist:XML in orgXML.elements("*") ) { //nodelist  get all xml
			if ( nodelist.node.(@id == selectid).@id == selectid ) {
			ancestorID = nodelist.@id.toString(); //ancestorID is parent id of selected child
			var x:XMLList = orgXML.node.(@id == ancestorID); //get all child of node ancestorID
			
			if(p.@state){
			if(updatechild(x,STATE_CHECKED)){
			x.@state = STATE_CHECKED;
			} else {
			x.@state = STATE_UNCHECKED;
			}
			
			} else {
			x.@state = STATE_UNCHECKED;
			}
			break;
			}
			}
			}
			
			Alert.show(textAlert);
			} */
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="State1"/>
		<s:State name="State2"/>
		<s:State name="State3"/>
	</s:states>
	
	<!--<s:Rect x="0" y="0" width="100%" height="100%" id="rect1" visible="true">-->
		<!--<s:stroke>
			<s:SolidColorStroke caps="none" color="#5C5C5C" joints="miter" miterLimit="4" weight="1"/>
		</s:stroke>-->
		<!--<s:fill>
			<s:SolidColor color="0xFFFFFF" />
		</s:fill>-->
		<!--<s:filters>
			<s:DropShadowFilter alpha="0.5" angle="45.0" blurX="4.0" blurY="4.0" color="#000000"
								distance="4.0" hideObject="false" inner="false" knockout="false"
								quality="2" strength="1"/>
		</s:filters>-->
	<!--</s:Rect>-->
	
	<!-- itemClick="treeid_itemClickHandler(event)" -->
	<!-- itemDoubleClick="treeid_itemDoubleClickHandler(event)" -->
	
	<s:VGroup width="100%" height="100%" gap="0">
		<mx:Tree id="treeid" includeIn="State1,State2,State3" width="100%" height="100%"
				 creationComplete="expandNodes()" defaultLeafIcon="{null}"
				 folderClosedIcon="{null}"
				 folderOpenIcon="{null}"
				 disclosureClosedIcon="{ICON_FOLDER_EXPAND}"
				 disclosureOpenIcon="{ICON_FOLDER_COLLAPSE}"
				 itemDoubleClick="treeid_itemDoubleClickHandler(event)"
				 rowHeight="16" iconFunction="tree_iconFunc"
				 fontFamily="Franklin Gothic Medium" fontSize="11"
				 itemRenderer="custom_tree_component.CheckTreeRenderer_For_DE" labelField="@label"
				 showRoot="true"
				 doubleClickEnabled="true">
				<!--itemRenderer="custom_tree_component.CheckTreeRenderer" labelField="@label"-->
			
		</mx:Tree>
	</s:VGroup>
	
</s:Group>
