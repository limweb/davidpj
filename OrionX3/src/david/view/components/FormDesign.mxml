<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:model="com.vstyran.transform.model.*" 
		 xmlns:compx="component.*" 
		 xmlns:view="view.*" 
		 width="100%" height="100%" 
		 creationComplete="init()" 
		 xmlns:ascomponent="th.co.shopsthai.ascomponent.*" xmlns:resize="flex.utils.spark.resize.*" 
		 >
	<fx:Declarations>
		<fx:Component className="VGuideLine">
			<s:Line y="45" height="230" alpha="0.1">
				<s:stroke>
					<s:SolidColorStroke/>
				</s:stroke>
			</s:Line>
		</fx:Component>                                       
		<fx:Component className="HGuideLine">
			<s:Line x="30" width="400" alpha="0.1">
				<s:stroke>
					<s:SolidColorStroke/>
				</s:stroke>
			</s:Line>
		</fx:Component>                                       
		<fx:Component className="RGuideLine">
			<s:Line>
				<fx:Script>
					<![CDATA[
						import mx.core.UIComponent;
						
						
					]]>
				</fx:Script>
				<s:stroke>
					<s:SolidColorStroke color="#AA0000"/>
				</s:stroke>
			</s:Line>
		</fx:Component>    
		<s:ArrayList id="testArray">
			<fx:String>This is a very long string that goes on and on to show horizontal scrollbars</fx:String>
			<fx:String>Test1</fx:String>
			<fx:String>Test2</fx:String>
			<fx:String>Test3</fx:String>
			<fx:String>Test4</fx:String>
			<fx:String>Test5</fx:String>
			<fx:String>Test6</fx:String>
			<fx:String>Test7</fx:String>
			<fx:String>Test8</fx:String>
			<fx:String>Test9</fx:String>
			<fx:String>Test10</fx:String>
			<fx:String>Test11</fx:String>
			<fx:String>Test12</fx:String>
			<fx:String>Test13</fx:String>
			<fx:String>Test14</fx:String>
			<fx:String>Test15</fx:String>
			<fx:String>Test16</fx:String>
			<fx:String>Test17</fx:String>
			<fx:String>Test18</fx:String>
			<fx:String>Test19</fx:String>
			<fx:String>Test20</fx:String>
		</s:ArrayList>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import flex.utils.spark.resize.ResizeMovecheckbox;
			import flex.utils.spark.resize.ResizeMoveDatechooser;
			import flex.utils.spark.resize.ResizeMovePopUpButton;
			import flex.utils.spark.resize.ResizeMoveNumberStepperSkin;
			import flex.utils.spark.resize.ResizableTextAreaSkin;
			import spark.components.TextArea;
			import spark.components.TextInput;
			import flex.utils.spark.resize.TextInputResize;
			import flex.utils.spark.resize.ResizableCmbSkin;
			import flex.utils.ui.resize.ResizableButton;
			import spark.components.VSlider;
			import spark.components.HSlider;
			import spark.components.DropDownList;
			import mx.controls.PopUpButton;
			import spark.components.NumericStepper;
			import mx.controls.DateChooser;
			import spark.components.CheckBox;
//			import mx.controls.TextInput;
			import mx.core.IUIComponent;
			import spark.components.Button;
			import th.co.shopsthai.resize.rzmvPanelDataGrid;
			import th.co.shopsthai.resize.rzmvDataGrid;
			import spark.layouts.TileLayout;
			import flex.utils.spark.resize.ResizableTitledBorderBoxSkin;
			import flex.utils.spark.TitledBorderBox;
			import flex.utils.spark.resize.ResizableComboBoxSkin;
			import mx.geom.RoundedRectangle;
			import th.co.shopsthai.ascomponent.rzmvasBroderContainer;
			import th.co.shopsthai.resize.rzmvasBroderContainerSkin;
			import spark.layouts.VerticalLayout;
			import org.osmf.utils.Version;
			import flex.utils.spark.resize.ResizableDraggableTitleWindowSkin;
			import spark.components.TitleWindow;
			import th.co.shopsthai.resize.rzmvButtonSkin;
			import mx.core.DragSource;
			import mx.controls.Label;
			import skins.CustomTransformToolSkin;
			import com.vstyran.transform.connectors.UIScaleConnector;
			import com.vstyran.transform.connectors.UIConnector;
			import view.CustomTransformTool;
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import flash.text.engine.TextLine;
			import avmplus.FLASH10_FLAGS;
			import component.vDateChooser;
			import component.vTextArea;
			import component.vRadioBtn;
			import component.vCheckBox;
			import component.vTextInput;
			import component.vButton;
			import org.yang.chen.skins.TTIResponsiveSkin;
			import component.ToggleTextInput;
			import com.vstyran.transform.events.TransformEvent;
			import mx.utils.ObjectUtil;
			import david.view.configs.Constants;
			import mx.controls.Alert;
			import component.vComboBox;
			import com.vstyran.transform.events.GuidelineEvent;
			import com.vstyran.transform.model.Bounds;
			import com.vstyran.transform.model.GridData;
			import com.vstyran.transform.model.Guideline;
			
			import component.cusCompDateChooser;
			import component.cusCompTextArea;
			import component.vDataGrid;
			
			import david.view.fromSkin.buttonSkin;
			import david.view.fromSkin.checkboxSkin;
			import david.view.fromSkin.radioBtnSkin;
			import david.view.fromSkin.textAreaSkin;
			import david.view.fromSkin.txtinputSkin;
			import david.view.fromSkin.vDataGridSkin;
			
			import itemrenders.ButtonItemRender;
			import itemrenders.ComboboxItemRender;
			import itemrenders.TextInputItemRender;
			
			import mx.controls.ComboBox;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.ResizeEvent;
			import mx.managers.DragManager;
			
			import spark.components.RadioButton;
			import spark.components.gridClasses.GridColumn;
			
			private var bounds:Bounds = new Bounds();
			private	var griddata:GridData = new GridData(); // กำหนดการ snap to grid
			private var _currentTarget:UIComponent;
			
			public var tool:CustomTransformTool
			private var uiConnector:UIConnector;
			private var uiScaleConnector:UIScaleConnector;
			
			public function init():void {
				toolInit();
				frmSetting();
				vginit();
			}
			
			private function frmSetting():void {
				
				// Form Main
				frmMainID.maxWidth = Constants.formMaxWidth;
				frmMainID.minWidth = Constants.formMinWidth;
				
				// Form Title
				//				frmTitleBox.height = Constants.formTitleBoxHeight;
				//				frmTitleBox.setStyle('backgroundColor',Constants.formTitleBoxBackgroundColor);
				//				frmTitleBox.alpha = Constants.formTitleBoxAlpha;
				//				frmTitleBox.setStyle('horizontalAlign',Constants.formTitleHorizontalAlign);
				//				frmTitleBox.setStyle('verticalAlign',Constants.formTitleVerticalAlign);
				//				frmTitleBox.setStyle('fontFamily',Constants.formTitleFontFamily);
				//				frmTitleBox.setStyle('fontSize',Constants.formTitleFontSize);
				//				frmTitleBox.setStyle('fontStyle',Constants.formTitleFontStyle);
				//				lblfrmTitle.text = Constants.formTitleLabel;
				
				// Form SubTitle
				//				frmSub.height = Constants.formSubtitleBoxHeight;
				//				frmSub.setStyle('backgroundColor',Constants.formSubtitleBoxBackgroundColor);
				//				frmSub.alpha = Constants.formSubtitleBoxAlpha;
				//				frmSub.setStyle('horizontalAlign',Constants.formSubtitleHorizontalAlign);
				//				frmSub.setStyle('verticalAlign',Constants.formSubtitleVerticalAlign);
				//				frmSub.setStyle('fontFamily',Constants.formSubtitleFontFamily);
				//				frmSub.setStyle('fontSize',Constants.formSubtitleFontSize);
				//				frmSub.setStyle('fontStyle',Constants.formSubtitleFontStyle);
				//				lblfrmSubTitle.text = Constants.formSubtitleLabel;		
			}
			
			private function toolInit():void {
				uiConnector = new UIConnector();
				uiScaleConnector = new UIScaleConnector();
				tool = new CustomTransformTool();
				tool.setStyle("skinClass", Class(CustomTransformToolSkin));
				var bounds:Bounds = new Bounds();
				
				
				
				bounds.x = GG.x;
				bounds.y = GG.y;
				bounds.width = GG.width;
				bounds.height = GG.height;
				
				griddata.cellHeight = 20;
				griddata.cellWidth = 20;
				griddata.fraction = 5;
				griddata.x = 1;
				griddata.y = 1;
				
				setCurrentTarget(null);
				tool.textMode = true;
				tool.maintainMoveShortcuts = true;
				tool.connector =  uiConnector;
				tool.bounds = bounds;
				tool.grid  = griddata;
				tool.visible = false;
				GG.addElement(tool);
			}
			
			public function setCurrentTarget(value:UIComponent):void
			{
				_currentTarget = value;
				
				uiScaleConnector.target = null;
				uiConnector.target = null;
				
				if(_currentTarget == null)
					return;
				
				if(_currentTarget is vButton || _currentTarget is vCheckBox || _currentTarget is vRadioBtn ||  _currentTarget is vDateChooser )
				{
					tool.textMode = false;
					uiScaleConnector.target = _currentTarget;
					tool.connector = uiScaleConnector;
				}
				else
				{
					tool.textMode = true;
					uiConnector.target = _currentTarget;
					tool.connector = uiConnector;
				}
			}
			
			
			private function tool_keyDownHandler(event:KeyboardEvent):void {
				
				if(event.keyCode == Keyboard.DELETE){
					if(tool.visible && _currentTarget != null ){
						GG.removeElement(_currentTarget);
						//						tool.target = null;
						setCurrentTarget(null);
						tool.visible = false;
					}
				} 
			}
			
			//			protected function tool_guidelinesUpdateHandler(event:GuidelineEvent):void
			//			{
			//				
			//				if(event.cross && event.cross.vGuideline)
			//					vGuide.x = event.cross.vGuideline.value;
			//				vGuide.visible = (event.cross && event.cross.vGuideline);
			//				
			//				if(event.cross && event.cross.hGuideline)
			//					hGuide.y = event.cross.hGuideline.value;
			//				hGuide.visible = (event.cross && event.cross.hGuideline);
			//				
			//				passiveGuideGroup.removeAllElements();
			//				if(event.cross)
			//				{
			//					if(showPassiveGuides.selected)
			//					{
			//						for each (var vguide:Guideline in event.cross.getVGuidelines()) 
			//						{
			//							var vGuideLine:VGuideLine = new VGuideLine();
			//							vGuideLine.x = vguide.value;
			//							passiveGuideGroup.addElement(vGuideLine);
			//						}
			//						for each (var hguide:Guideline in event.cross.getHGuidelines()) 
			//						{
			//							var hGuideLine:HGuideLine = new HGuideLine();
			//							hGuideLine.y = hguide.value;
			//							passiveGuideGroup.addElement(hGuideLine);
			//						}
			//					}
			//				}
			//			}	
			
			protected function select(event:MouseEvent):void
			{
				trace(event.ctrlKey);
				if(_currentTarget != event.currentTarget)
				{
					if(event.currentTarget == spark.components.Button ){
						
						
					} else {
						
						setCurrentTarget(event.currentTarget as UIComponent);
						//							if(tool.target.className == 'vDataGrid'){
						//								ComponentList.disablevDataGrid(tool.target.id);
						//							}
						tool.showPreviewCover = true;
						tool.startMoving(event);
						tool.visible = true;
					}
				}
			}
			
			protected function unselect(event:MouseEvent):void {
				if(tool){
					tool.visible = false;
					uiConnector.target = null;
					uiScaleConnector.target = null;
					ComponentList.enableCoponent(null);
				}
			}	
			
			//			protected function GG_resizeHandler(event:ResizeEvent):void
			//			{
			//				bounds.x = GG.x;
			//				bounds.y = GG.y;
			//				bounds.width = GG.width;
			//				bounds.height = GG.height;
			//				if (tool!=null)
			//				{
			//					tool.bounds = bounds;
			//				}
			//			}
			
			public function update(target:UIComponent, passiveGuideGroup:Group):void
			{
				//				var m:Matrix = TransformUtil.getMatrix(target, passiveGuideGroup);
				//				
				//				var stPoimt:Point =  m.transformPoint(new Point(target.width/2, target.height/2));
				//				var endPoimt:Point =  m.transformPoint(new Point(target.width, target.height/2));
				//				this.xFrom = stPoimt.x;
				//				this.yFrom = stPoimt.y;
				//				this.xTo = endPoimt.x;
				//				this.yTo = endPoimt.y;
			}
			
			protected function box1_clickHandler(event:MouseEvent):void
			{
//				if(event.target.hasOwnProperty('className') ){
//					if(event.target.className == "Box"){
//						if(tool){
//							tool.visible = false;
//							setCurrentTarget(null);
//							ComponentList.enableCoponent(null);
//						}
//					}
//				}
			}
			
			
			// releases the mouse button while over the Canvas container.
			private var PGG:rzmvasBroderContainer;
			
//			private function dragDropHandler(event:DragEvent):void {
//				
//				// Get the data identified by the color format
//				// from the drag source.
//				
//				//ImageRenderer.selected;
//				
//				var data:Object;
//				
//				if( event.dragSource.hasFormat('img')) {
//					
//					data = event.dragSource.dataForFormat('img');
//					
//					//switch(data.toolTip)
//					switch(FlexGlobals.topLevelApplication.selected)
//					{
//						case "Button":
//						{
//							//							var bt:vButton = new vButton();
//							//							bt.doubleClickEnabled = true;
//							//							bt.x = event.localX;
//							//							bt.y = event.localY;
//							//							bt.id = FlexGlobals.topLevelApplication.getIdx;
//							//							bt.minWidth = 230;
//							//							bt.minHeight = 20;
//							//							bt.width = 230;
//							//							bt.height = 24;
//							//							bt.addEventListener(MouseEvent.MOUSE_DOWN,select);
//							////							bt.setStyle("skinClass", Class(buttonSkin));
//							//							FlexGlobals.topLevelApplication.updateComplete = true;
//							//							if( (bt.x+bt.width) >= GG.width){
//							//								bt.x = GG.width - bt.width;
//							//							}
//							//							GG.addElement(bt);
//							//							ComponentList.Accomp.addItem(bt);
//							//							bt.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));
//							//-------------NEW ---------------------
//							var bt:TitleWindow= new TitleWindow();
//							bt.doubleClickEnabled = true;
//							bt.x = event.localX;
//							bt.y = event.localY;
//							bt.id = FlexGlobals.topLevelApplication.getIdx;
//							bt.minWidth = 230;
//							bt.minHeight = 220;
//							bt.width = 230;
//							bt.height = 224;
//							bt.setStyle('skinClass',ResizableDraggableTitleWindowSkin);
//							PGG.addElement(bt);
//							ComponentList.Accomp.addItem(bt);
//							
//							//-------------NEW ---------------------
//							break;
//						}
//						case "vLayout":{
//							PGG = new rzmvasBroderContainer();
//							PGG.setStyle('skinClass',rzmvasBroderContainerSkin);
//							PGG.layout = new VerticalLayout();
//							PGG.percentWidth = 100;
//							PGG.percentHeight = 100;
//							PGG.MV = true;
//							PGG.RR = true;
//							supGG.addElement(PGG);
//							break;
//						}
//						case "TextInput":
//						{
//							//							var tx:spark.components.TextInput = new spark.components.TextInput();
//							var tx:vTextInput = new vTextInput();
//							tx.doubleClickEnabled = true;
//							tx.id = FlexGlobals.topLevelApplication.getIdx;
//							tx.x = event.localX;
//							tx.y = event.localY;
//							tx.width = 230;
//							tx.height = 24;
//							tx.minWidth = 230;
//							tx.minHeight = 20;
//							tx.addEventListener(MouseEvent.MOUSE_DOWN,select);
//							//							tx.setStyle("skinClass", Class(txtinputSkin));
//							if((tx.x + tx.width) >= GG.width){
//								tx.x = GG.width - tx.width;
//							}
//							GG.addElement(tx);
//							ComponentList.Accomp.addItem(tx);
//							tx.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));
//							break;
//						}
//						case "CheckBox":
//						{
//							//							var ck:spark.components.CheckBox = new spark.components.CheckBox();
//							var ck:vCheckBox = new vCheckBox();
//							ck.doubleClickEnabled = true;
//							ck.chk.label = "checkbox 1";
//							ck.id = FlexGlobals.topLevelApplication.getIdx;
//							ck.x = event.localX;
//							ck.y = event.localY;
//							ck.width = 200;
//							ck.height = 24;
//							ck.minWidth = 200;
//							ck.minHeight = 20;
//							ck.addEventListener(MouseEvent.MOUSE_DOWN,select);
//							ck.setStyle("skinClass", Class(checkboxSkin));
//							if((ck.x + ck.width) >= GG.width){
//								ck.x = GG.width - ck.width;
//							}
//							GG.addElement(ck);
//							ComponentList.Accomp.addItem(ck);
//							ck.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));
//							break;
//						}
//						case "DataGrid":
//						{
//							var dg:vDataGrid = new vDataGrid();
//							dg.doubleClickEnabled = true;
//							dg.addEventListener(DragEvent.DRAG_ENTER,dgDragEnterHandler);
//							dg.addEventListener(DragEvent.DRAG_DROP,dgDragDropHandler);
//							dg.x = event.localX;
//							dg.y = event.localY;
//							dg.addEventListener(MouseEvent.CLICK,select);
//							//							dg.setStyle("skinClass",Class(vDataGridSkin));
//							dg.minWidth = 20;
//							dg.minHeight = 20;
//							dg.width = 300;
//							dg.height = 200;
//							dg.id = FlexGlobals.topLevelApplication.getIdx;							
//							if((dg.x + dg.width) >= GG.width){
//								dg.x = GG.width - dg.width;
//							}
//							GG.addElement(dg);
//							ComponentList.Accomp.addItem(dg);
//							dg.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));
//							break;
//						}
//						case "DateChooser":
//						{
//							//							var dc:cusCompDateChooser = new cusCompDateChooser();
//							var dc:vDateChooser = new vDateChooser();
//							dc.doubleClickEnabled = true;
//							dc.id = FlexGlobals.topLevelApplication.getIdx;							
//							dc.x = event.localX;
//							dc.y = event.localY;
//							dc.width = 300;
//							dc.height = 200;
//							dc.minWidth = 300;
//							dc.minHeight = 200;
//							dc.addEventListener(MouseEvent.MOUSE_DOWN,select);
//							if((dc.x + dc.width) >= GG.width){
//								dc.x = GG.width - dc.width;
//							}
//							GG.addElement(dc);
//							ComponentList.Accomp.addItem(dc);
//							dc.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));
//							break;
//						}
//						case "RadioButton":
//						{
//							//							var rd:RadioButton = new RadioButton();
//							var rd:vRadioBtn = new vRadioBtn();
//							rd.doubleClickEnabled = true;
//							rd.rdo.label = "Radio Button";
//							rd.id = FlexGlobals.topLevelApplication.getIdx;
//							rd.x = event.localX;
//							rd.y = event.localY;
//							rd.width = 200;
//							rd.height = 24;
//							rd.minWidth = 200;
//							rd.minHeight = 20;
//							
//							rd.addEventListener(MouseEvent.MOUSE_DOWN,select);
//							//							rd.setStyle("skinClass",Class(radioBtnSkin));
//							
//							if((rd.x + rd.width) >= GG.width){
//								rd.x = GG.width - rd.width;
//							}
//							GG.addElement(rd);
//							ComponentList.Accomp.addItem(rd);
//							rd.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));
//							break;
//						}
//						case "TextArea":
//						{	
//							//							var ta:cusCompTextArea = new cusCompTextArea();
//							var ta:vTextArea = new vTextArea();
//							ta.tatxt1.text = "Text Area";
//							ta.doubleClickEnabled = true;
//							ta.id = FlexGlobals.topLevelApplication.getIdx;							
//							ta.x = event.localX;
//							ta.y = event.localY;
//							ta.width = 300;
//							ta.height = 50;
//							ta.minWidth = 200;
//							ta.minHeight = 50;
//							
//							
//							ta.addEventListener(MouseEvent.MOUSE_DOWN,select);
//							//							ta.setStyle("skinClass",Class(textAreaSkin));
//							
//							if((ta.x + ta.width) >= GG.width){
//								ta.x = GG.width - ta.width;
//							}
//							GG.addElement(ta);
//							ComponentList.Accomp.addItem(ta);
//							ta.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));
//							break;
//						}
//						case 9:
//						{	
//							var cc:customComponent = new customComponent();
//							cc.id = FlexGlobals.topLevelApplication.getIdx;							cc.x = event.localX;
//							cc.y = event.localY;
//							cc.minWidth = 20;
//							cc.minHeight = 20;
//							
//							cc.addEventListener(MouseEvent.MOUSE_DOWN,select);
//							
//							
//							if((cc.x + cc.width) >= GG.width){
//								cc.x = GG.width - cc.width;
//							}
//							GG.addElement(cc);	
//							ComponentList.Accomp.addItem(cc);
//							cc.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));
//							break;
//						}						
//						case "ComboBox":
//						{
//							var cb:vComboBox = new vComboBox();
//							cb.x = event.localX;
//							cb.y = event.localY;
//							cb.minWidth = 230;
//							cb.minHeight = 20;
//							cb.id = FlexGlobals.topLevelApplication.getIdx;
//							cb.addEventListener(MouseEvent.MOUSE_DOWN,select);
//							if((cb.x + cb.width) >= GG.width){
//								cb.x = GG.width - cb.width;
//							}
//							GG.addElement(cb);
//							ComponentList.Accomp.addItem(cb);
//							cb.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));
//							break;
//						}
//						case "ToggleTextInput":{
//							
//							var tg:ToggleTextInput = new ToggleTextInput();
//							tg.doubleClickEnabled = true;
//							tg.addButtonLabel="Add User Name";
//							tg.id = FlexGlobals.topLevelApplication.getIdx;
//							tg.x = event.localX;
//							tg.y = event.localY;
//							tg.width = 120;
//							tg.height = 24;
//							tg.minWidth = 20;
//							tg.minHeight = 20;
//							tg.addEventListener(MouseEvent.MOUSE_DOWN,select);
//							tg.setStyle("skinClass", Class(TTIResponsiveSkin));
//							if((tg.x + tg.width) >= GG.width){
//								tg.x = GG.width - tx.width;
//							}
//							GG.addElement(tg);
//							ComponentList.Accomp.addItem(tg);
//							tg.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));
//							
//							break;
//						}
//						default:
//						{
//							break;
//						}
//							
//					} // cacse 
//					
//				} 
//				
//				for(var i:int=0;i<ComponentList.Accomp.length;i++){
//					//					trace(ComponentList.Accomp[i].id + ':' + ComponentList.Accomp[i].className );  
//				}
//				
//			}
			
			
			private function dgDragEnterHandler(event:DragEvent):void {
				if(event.dragSource.hasFormat('itemrender')){
					var dropTarget:vDataGrid = vDataGrid(event.currentTarget);// as dataGrid
					DragManager.acceptDragDrop(dropTarget);
				} else {}
			}			
			
			private function dgDragDropHandler(event:DragEvent):void {
				if(event.target.className == "vDataGrid"){
					if(!event.target.isDelele){ 
						event.target.isDelele = !event.target.isDelele;
						event.target.dgGrid.columns = [];
					}
					//					var col:GridColumn = new GridColumn();
					var columns:Array = event.target.dgGrid.columns;
					var col:DataGridColumn  = new DataGridColumn();
					col.dataField = "dataField"+ (event.target.dgGrid.columns.length+1).toString();
					col.headerText = "Column " + (event.target.dgGrid.columns.length+1).toString();
					if(event.dragSource.hasFormat('ButtonIR')){
						col.itemRenderer = new ClassFactory(ButtonItemRender);
						columns.push(col);
						//						event.target.dgGrid.columns.push(col);
					} else if(event.dragSource.hasFormat('ComboBoxIR')){
						col.itemRenderer = new ClassFactory(ComboboxItemRender);
						columns.push(col);
					} else if(event.dragSource.hasFormat('TextInputIR')){
						col.itemRenderer = new ClassFactory(TextInputItemRender);					
						columns.push(col);
					}
					event.target.dgGrid.columns = columns;
				}
			}
			
			private function dragEnterHandler(event:DragEvent):void {
				DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
			}
//			private function dragEnterHandler(event:DragEvent):void {
//				if(event.dragSource.hasFormat("itemrender")){
//					return;
//				}else{
//					var dropTarget:Box = Box(event.currentTarget);// as vBOX
//					DragManager.acceptDragDrop(dropTarget);
//				}
//			}
			
			protected function tool_transformationStartHandler(event:TransformEvent):void
			{
				//				trace("event.target" + event.target );
				//				trace("event.currenttarget" + event.currentTarget );
				//				ComponentList.disableCombobox(event.currentTarget.id);
				//				trace(ObjectUtil.toString(event.data));
			}
			
			protected function tool_transformationHandler(event:TransformEvent):void
			{
				//				trace(ObjectUtil.toString(event.data));
				//				trace("event trans type = " + event.transformationType );
				if(event.transformationType == 'resize'){
				} else {
					//					trace('tooldata xy = ' + event.toolData.x.toString() + ":" + event.toolData.y.toString() );
				}
				ComponentList.disableCombobox(event.currentTarget.target.id);
			}	
			
			protected function tool_transformationCompleteHandler(event:TransformEvent):void
			{
				trace('tooldata xy = ' + event.toolData.x.toString() + ":" + event.toolData.y.toString() );
			}
			
			
			//-----------VGropu -------------------
			private function vginit():void 
			{
				//				button1.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler,false,0,true);
				//				button2.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler,false,0,true);
				//				button3.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler,false,0,true);
				//				button4.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler,false,0,true);
				//				button5.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler,false,0,true);
				//				button6.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler,false,0,true);
				//				button7.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler,false,0,true);
				//				button8.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler,false,0,true);
				//				bdCon.height = calculateVboxHeight(mainParent);
				//				bdCon1.height = calculateVboxHeight(mainParent1);
				//				bdCon.width = calculateVboxWidth(mainParent);
				//				bdCon1.width = calculateVboxWidth(mainParent1);				
			}
			
			//for vertical align
			//			private function calculateVboxHeight(vg:VGroup):Number
			//			{
			//				if (vg.numElements >  0)
			//				{
			//					var totalH:Number=0;
			//					for ( var i:int=0; i < vg.numElements; i++)
			//					{
			//						var obj:Object = vg.getElementAt(i) ;
			//						totalH += obj.height;
			//					}
			//					totalH += vg.gap*(vg.numElements+1);
			//					trace(totalH);
			//					return totalH;
			//				} else {
			//					return 0;
			//				}
			//			}
			
			//			private function calculateVboxWidth(vg:VGroup):Number
			//			{
			//				if (vg.numElements >  0)
			//				{
			//					var maxW:Number=0;
			//					for ( var i:int=0; i < vg.numElements; i++)
			//					{
			//						var obj:Object = vg.getElementAt(i);
			//						
			//						if (maxW > obj.width)
			//						{
			//							
			//						}
			//						else
			//						{
			//							maxW = obj.width;
			//						}
			//					}
			//					maxW += vg.gap*(2);
			//					return maxW;
			//				} else {
			//					return 0;
			//				}
			//			}
			
//			private function mouseDownHandler(e)
//			{
//				e.currentTarget.addEventListener(MouseEvent.MOUSE_MOVE,mouseMoveHandler,false,0,true);
//			}
			
//			private function mouseMoveHandler(event:MouseEvent):void {
//				event.currentTarget.removeEventListener(MouseEvent.MOUSE_MOVE,mouseMoveHandler,false);
//				
//				// Get the drag initiator component from the event object.
//				var dragInitiator:UIComponent = UIComponent(event.currentTarget);
//				
//				var dragItem = dragInitiator;
//				
//				// Create a DragSource object.
//				var ds:DragSource = new DragSource();
//				
//				// Add the data to the object.
//				ds.addData(dragItem, 'item');
//				
//				// Call the DragManager doDrag() method to start the drag. 
//				DragManager.doDrag(dragInitiator, ds, event);
//			}
			
			// Called when the user moves the drag indicator onto the drop target.
//			var newSlidePos = 0;
//			private function vgdragEnterHandler(event:DragEvent):void {
//				
//				//				// Accept the drag only if the user is dragging data 
//				//				
//				//				if (event.dragSource.hasFormat('item')) {
//				//					
//				//					if(event.localY < event.currentTarget.measuredHeight/event.currentTarget.numElements)
//				//					{
//				//						newSlidePos = 0;
//				//					}
//				//					else
//				//					{
//				//						newSlidePos = Math.floor(event.localY / (event.currentTarget.measuredHeight/event.currentTarget.numElements));
//				//					}
//				//					trace(newSlidePos);
//				//					// Get the drop target component from the event object.
//				//					var dropTarget = VGroup(event.currentTarget);
//				//					var num:Number = calculateVboxHeight(dropTarget);
//				//					event.currentTarget.parent.height =  num;
//				//					// Accept the drop.
//				//					DragManager.acceptDragDrop(dropTarget);
//				//				}
//			}
			
			// Called if the target accepts the dragged object and the user 
			// releases the mouse button while over the Canvas container. 
			private function vgdragDropHandler(event:DragEvent):void {
				//				// from the drag source.
				//				var data = event.dragSource.dataForFormat('item');
				//				//				event.currentTarget.
				//				event.currentTarget.addElement(data);
				//				bdCon.height = calculateVboxHeight(mainParent);
				//				bdCon1.height = calculateVboxHeight(mainParent1);
				//				bdCon.width = calculateVboxWidth(mainParent);
				//				bdCon1.width = calculateVboxWidth(mainParent1);						
				//				event.currentTarget.setElementIndex(data,newSlidePos);
				//				newSlidePos = 0;
			} 
			
			protected function mainParent_dragOverHandler(event:DragEvent):void
			{
				trace('local xy', event.localX,":",event.localY);
				
			}
			
			private function dragDropHandler(event:DragEvent):void {
				
				if(event.dragSource.hasFormat('NEW')){
					
					if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'BOX'		){
						// BorderContainer
						var br:rzmvasBroderContainer = new rzmvasBroderContainer();
						br.id = 'BOX' + FlexGlobals.topLevelApplication.getIdx;
						br.setStyle('skinClass',rzmvasBroderContainerSkin);
						event.currentTarget.addElement(br);
						br.MV = true;
						br.RR = true;
						br.addEventListener(MouseEvent.CLICK,mouseClickselect);
						br.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
						br.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
						br.addEventListener(MouseEvent.ROLL_OVER,mouseRollOverHander);
						br.x = event.currentTarget.x;
						br.y = event.currentTarget.y;
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'PANEL'		){
						//TitleWindows 
						var tw:TitleWindow = new TitleWindow();
						tw.id = 'PANEL' + FlexGlobals.topLevelApplication.getIdx;
						tw.title = tw.id;
						tw.setStyle('skinClass',ResizableDraggableTitleWindowSkin);
						event.currentTarget.addElement(tw);
						tw.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
						tw.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
						tw.addEventListener(MouseEvent.ROLL_OVER,mouseRollOverHander);
						tw.x = event.currentTarget.x;
						tw.y = event.currentTarget.y;
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'TBBOX'		){
						var tb:TitledBorderBox = new TitledBorderBox();
						tb.id = 'TBBOX' + FlexGlobals.topLevelApplication.getIdx;
						tb.title = tb.id;
						tb.width = 100; tb.height = 50;
						tb.setStyle('skinClass',ResizableTitledBorderBoxSkin);
						event.currentTarget.addElement(tb);
						tb.addEventListener(MouseEvent.CLICK,mouseClickselect);
						tb.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
						tb.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
						tb.addEventListener(MouseEvent.ROLL_OVER,mouseRollOverHander);
						tb.x = event.currentTarget.x;
						tb.y = event.currentTarget.y;
					} else	if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'VBOX'		){
						var vbr:rzmvasBroderContainer = new rzmvasBroderContainer();
						vbr.layout = new VerticalLayout(); 
						vbr.id = 'VBOX' + FlexGlobals.topLevelApplication.getIdx;
						vbr.setStyle('skinClass',rzmvasBroderContainerSkin);
						event.currentTarget.addElement(vbr);
						vbr.MV = true;
						vbr.RR = true;
						vbr.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
						vbr.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
						vbr.addEventListener(MouseEvent.ROLL_OVER,mouseRollOverHander);
						vbr.x = event.currentTarget.x;
						vbr.y = event.currentTarget.y;
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'VPANEL'		){
						//TitleWindows + vertical  layout
						var vtw:TitleWindow = new TitleWindow();
						vtw.id = 'VPANEL' + FlexGlobals.topLevelApplication.getIdx;
						vtw.title = vtw.id;
						vtw.setStyle('skinClass',ResizableDraggableTitleWindowSkin);
						vtw.layout = new VerticalLayout(); 
						event.currentTarget.addElement(vtw);
						vtw.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
						vtw.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
						vtw.addEventListener(MouseEvent.ROLL_OVER,mouseRollOverHander);
						vtw.x = event.currentTarget.x;
						vtw.y = event.currentTarget.y;
						
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'VTBBOX'		){
						var vtb:TitledBorderBox = new TitledBorderBox();
						vtb.id = 'VTBBOX' + FlexGlobals.topLevelApplication.getIdx;
						vtb.title = vtb.id;
						vtb.width = 100; vtb.height = 50;
						vtb.setStyle('skinClass',ResizableTitledBorderBoxSkin);
						event.currentTarget.addElement(vtb);
						vtb.addEventListener(MouseEvent.CLICK,mouseClickselect);
						vtb.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
						vtb.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
						vtb.addEventListener(MouseEvent.ROLL_OVER,mouseRollOverHander);
						vtb.x = event.currentTarget.x;
						vtb.y = event.currentTarget.y;
						
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'HBOX' ) {
						// BorderContainer + Horizontallayout
						var hbr:rzmvasBroderContainer = new rzmvasBroderContainer();
						hbr.layout = new HorizontalLayout(); 
						hbr.id = 'HBOX' + FlexGlobals.topLevelApplication.getIdx;
						hbr.setStyle('skinClass',rzmvasBroderContainerSkin);
						hbr.MV = true;
						hbr.RR = true;
						event.currentTarget.addElement(hbr);
						hbr.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
						hbr.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
						hbr.addEventListener(MouseEvent.MOUSE_OVER,mouseRollOverHander);
						hbr.x = event.currentTarget.x;
						hbr.y = event.currentTarget.y;
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'HPANEL' ) {
						//TitleWindows  + horizontal layout
						var htw:TitleWindow = new TitleWindow();
						htw.id = 'HPANEL' + FlexGlobals.topLevelApplication.getIdx;
						htw.title = htw.id;
						htw.layout = new HorizontalLayout();
						htw.setStyle('skinClass',ResizableDraggableTitleWindowSkin);
						event.currentTarget.addElement(htw);
						htw.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
						htw.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
						htw.addEventListener(MouseEvent.ROLL_OVER,mouseRollOverHander);
						htw.x = event.currentTarget.x;
						htw.y = event.currentTarget.y;
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'HTBBOX' ) {
						var htb:TitledBorderBox = new TitledBorderBox();
						htb.id = 'HTBBOX' + FlexGlobals.topLevelApplication.getIdx;
						htb.title = htb.id;
						htb.width = 100; htb.height = 50;
						htb.layout = new HorizontalLayout();
						htb.setStyle('skinClass',ResizableTitledBorderBoxSkin);
						event.currentTarget.addElement(htb);
						htb.addEventListener(MouseEvent.CLICK,mouseClickselect);
						htb.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
						htb.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
						htb.addEventListener(MouseEvent.ROLL_OVER,mouseRollOverHander);
						htb.x = event.currentTarget.x;
						htb.y = event.currentTarget.y;					
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'TBOX' ) {
						// BorderContainer + Horizontallayout
						var tbr:rzmvasBroderContainer = new rzmvasBroderContainer();
						tbr.layout = new TileLayout(); 
						tbr.id = 'TBOX' + FlexGlobals.topLevelApplication.getIdx;
						tbr.setStyle('skinClass',rzmvasBroderContainerSkin);
						tbr.MV = true;
						tbr.RR = true;
						event.currentTarget.addElement(tbr);
						tbr.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
						tbr.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
						tbr.addEventListener(MouseEvent.MOUSE_OVER,mouseRollOverHander);
						tbr.x = event.currentTarget.x;
						tbr.y = event.currentTarget.y;
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'TPANEL' ) {
						//TitleWindows  + horizontal layout
						var ttw:TitleWindow = new TitleWindow();
						ttw.id = 'TPANEL' + FlexGlobals.topLevelApplication.getIdx;
						ttw.title = ttw.id;
						ttw.layout = new TileLayout();
						ttw.setStyle('skinClass',ResizableDraggableTitleWindowSkin);
						event.currentTarget.addElement(ttw);
						ttw.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
						ttw.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
						ttw.addEventListener(MouseEvent.ROLL_OVER,mouseRollOverHander);
						ttw.x = event.currentTarget.x;
						ttw.y = event.currentTarget.y;
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'TTBBOX' ) {
						var ttb:TitledBorderBox = new TitledBorderBox();
						ttb.id = 'TTBBOX' + FlexGlobals.topLevelApplication.getIdx;
						ttb.title = ttb.id;
						ttb.width = 100; ttb.height = 50;
						ttb.layout = new TileLayout();
						ttb.setStyle('skinClass',ResizableTitledBorderBoxSkin);
						event.currentTarget.addElement(ttb);
						ttb.addEventListener(MouseEvent.CLICK,mouseClickselect);
						ttb.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
						ttb.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
						ttb.addEventListener(MouseEvent.ROLL_OVER,mouseRollOverHander);
						ttb.x = event.currentTarget.x;
						ttb.y = event.currentTarget.y;
						
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'DBGRID' ) {
						
						var dbGrid:rzmvDataGrid = new rzmvDataGrid();
						dbGrid.id = 'DBGRID' + FlexGlobals.topLevelApplication.getIdx;
						event.currentTarget.addElement(dbGrid);
						dbGrid.addEventListener(MouseEvent.CLICK,mouseClickselect);
						dbGrid.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
						dbGrid.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
						dbGrid.addEventListener(MouseEvent.ROLL_OVER,mouseRollOverHander);
						dbGrid.x = event.currentTarget.x;
						dbGrid.y = event.currentTarget.y;
						
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'PANELGRID' ) {
						
						var panelGrid:rzmvPanelDataGrid = new rzmvPanelDataGrid();
						panelGrid.id = 'PANELGRID' + FlexGlobals.topLevelApplication.getIdx;
						panelGrid.title = panelGrid.id;
						event.currentTarget.addElement(panelGrid);
						panelGrid.addEventListener(MouseEvent.CLICK,mouseClickselect);
						panelGrid.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
						panelGrid.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
						panelGrid.addEventListener(MouseEvent.ROLL_OVER,mouseRollOverHander);
						panelGrid.x = event.currentTarget.x;
						panelGrid.y = event.currentTarget.y;
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'rzBUTTON' ) {
						var bt:ResizableButton = new ResizableButton();
						bt.id = 'rzBUTTON' + FlexGlobals.topLevelApplication.getIdx;
						bt.label = bt.id;
						bt.movable="true"; bt.resizable="true";
						bt.addEventListener(MouseEvent.MOUSE_DOWN,function(e:MouseEvent):void {
							var dragInitiator:UIComponent = UIComponent(event.currentTarget);
							var dragItem:*  = dragInitiator;
							var ds:DragSource = new DragSource();
							ds.addData('NEW','NEW');
							ds.addData(event.currentTarget.toolTip,'cType');
							DragManager.doDrag(dragInitiator, ds, event);
							});
						event.currentTarget.addElement(bt);
						bt.x = event.currentTarget.x;
						bt.y = event.currentTarget.y;
						
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'rzCOMBO' ) {
						var cmb:ComboBox = new ComboBox();
						cmb.setStyle('skinClass',flex.utils.spark.resize.ResizableCmbSkin);
//						cmb.dataProvider = testArray;
						cmb.id = 'rzCOMBO' + FlexGlobals.topLevelApplication.getIdx;
						cmb.text = cmb.id;
						
						event.currentTarget.addElement(cmb);
						cmb.x = event.currentTarget.x;
						cmb.y = event.currentTarget.y;

					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'DropDownList' ) {
						var ddl:DropDownList = new DropDownList();
						ddl.setStyle('skinClass',flex.utils.spark.resize.ResizableDropDownListSkin);
						ddl.id = 'rzCOMBO' + FlexGlobals.topLevelApplication.getIdx;
						event.currentTarget.addElement(ddl);
						ddl.x = event.currentTarget.x;
						ddl.y = event.currentTarget.y;

					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'TextInput' ) {
						var txt:TextInput = new TextInput();
//						<s:TextInput x="357" y="43" skinClass="TextInputResize"/>
						txt.setStyle('skinClass',TextInputResize);
						txt.id = 'TextInput' + FlexGlobals.topLevelApplication.getIdx;
						txt.text = txt.id;
						event.currentTarget.addElement(txt);
						txt.x = event.currentTarget.x;
						txt.y = event.currentTarget.y;

					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'ToggleTextInput' ) {
						var tg:ToggleTextInput = new ToggleTextInput();
						tg.id = 'ToggleTextInput' + FlexGlobals.topLevelApplication.getIdx;
						tg.setStyle("skinClass", Class(TTIResponsiveSkin));
						tg.doubleClickEnabled = true;
						tg.addButtonLabel="Add User Name";
						tg.x = event.localX;
						tg.y = event.localY;
						tg.width = 120;
						tg.height = 24;
						tg.minWidth = 20;
						tg.minHeight = 20;
						event.currentTarget.addElement(tg);

					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'TextArea' ) {
						var ta:TextArea = new TextArea();
						ta.id = 'TextArea' + FlexGlobals.topLevelApplication.getIdx;
						ta.setStyle('skinClass',ResizableTextAreaSkin);
						ta.text = ta.id;
						ta.height = 100;
						event.currentTarget.addElement(ta);
						ta.x = event.currentTarget.x;
						ta.y = event.currentTarget.y;

					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'CheckBox' ) {
//						var chk:CheckBox = new CheckBox();
						var chk:ResizeMovecheckbox = new ResizeMovecheckbox();
						chk.id = 'CheckBox' + FlexGlobals.topLevelApplication.getIdx;
						chk.chkbox.label = chk.id;
						event.currentTarget.addElement(chk);
						chk.x = event.currentTarget.x;
						chk.y = event.currentTarget.y;

					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'RadioButton' ) {
						var rdo:RadioButton = new RadioButton();
						rdo.id = 'RadioButton' + FlexGlobals.topLevelApplication.getIdx;
						rdo.label = rdo.id;
						event.currentTarget.addElement(rdo);
						rdo.x = event.currentTarget.x;
						rdo.y = event.currentTarget.y;

					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'DateChooser' ) {
//						var dc:DateChooser = new DateChooser();
						var dc:ResizeMoveDatechooser = new ResizeMoveDatechooser();
						dc.id = 'DateChooser' + FlexGlobals.topLevelApplication.getIdx;
						dc.dateC.showToday = true;
						dc.dateC.yearNavigationEnabled = true;
						event.currentTarget.addElement(dc);
						dc.x = event.currentTarget.x;
						dc.y = event.currentTarget.y;

					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'NumericStepper' ) {
						var nbs:NumericStepper = new NumericStepper();
						nbs.id = 'NumericStepper' + FlexGlobals.topLevelApplication.getIdx;
						nbs.setStyle('skinClass',ResizeMoveNumberStepperSkin);
						nbs.maximum = 10;
						nbs.minimum = 0;
						nbs.stepSize = 1;
						event.currentTarget.addElement(nbs);
						nbs.x = event.currentTarget.x;
						nbs.y = event.currentTarget.y;
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'PopUpButton' ) {
//						<resize:ResizeMovePopUpButton />
						var pop:ResizeMovePopUpButton = new ResizeMovePopUpButton();
						pop.id = 'PopUpButton' + FlexGlobals.topLevelApplication.getIdx;
						pop.btnPop.label = pop.id;
						event.currentTarget.addElement(pop);
						pop.x = event.currentTarget.x;
						pop.y = event.currentTarget.y;
					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'HSlider' ) {
						var hsl:HSlider = new HSlider();
						hsl.id = 'HSlider' + FlexGlobals.topLevelApplication.getIdx;
						hsl.minimum = 0; hsl.maximum = 10; hsl.stepSize = 1;
						event.currentTarget.addElement(hsl);
						hsl.x = event.currentTarget.x;
						hsl.y = event.currentTarget.y;

					} else if(event.dragSource.hasFormat('cType') && event.dragSource.dataForFormat('cType') == 'VSlider' ) {
						var vsl:VSlider = new VSlider();
						vsl.id = 'VSlider' + FlexGlobals.topLevelApplication.getIdx;
						vsl.minimum = 0; vsl.maximum = 10; vsl.stepSize = 1;
						event.currentTarget.addElement(vsl);
						vsl.x = event.currentTarget.x;
						vsl.y = event.currentTarget.y;
						
					} 
					
					var i:int=0;
					var arr:Array = new Array();
					var o:Object;
					for(i=0;i< event.target.numElements;i++ ){
						o = new Object();
						if(Object(event.target.getElementAt(i)).id != id){
							trace('element at ',i,event.target.getElementAt(i).x,event.target.getElementAt(i).y);
							o.idx = i;
							o.x = event.target.getElementAt(i).x;
							o.y = event.target.getElementAt(i).y;
							o.id = Object(event.target.getElementAt(i)).id;
						} else {
							o.idx = i;
							o.x = event.localX;
							o.y = event.localY;
							o.id = id;
						}
						arr.push(o);
					}
					
					arr.sortOn(['y'],Array.NUMERIC);
					trace('arr',ObjectUtil.toString(arr));
					
					var n:uint = 0;
					for each (var item:Object in arr) 
					{
						if(item.id == id ){
							trace(n,item.id);
							event.target.setElementIndex(event.target.getElementAt(item.idx),n);
							break;
						}
						n++;
					}
					
				}
			}    

			protected function mouseClickselect(event:MouseEvent):void
			{
				trace('mouse click');
			}
			
			protected function keyupHandeler(event:KeyboardEvent):void
			{
				trace('key up ');
			}
			
			protected function mouseRollOverHander(event:MouseEvent):void
			{
				trace('mouve over horver');
			}

			
		]]>
	</fx:Script>
	
	<s:BorderContainer width="100%" height="100%" horizontalCenter="0" borderVisible="false">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:BorderContainer id="frmMainID" 
						   width="100%" minWidth="{frmMainID.minWidth}" maxWidth="{frmMainID.maxWidth}" height="100%"  
						   borderColor="black" borderStyle="solid">
			<s:layout>
				<s:VerticalLayout gap="0"/>
			</s:layout>
			<s:BorderContainer id="frmTitleBox" 
							   width="100%" height="24" 
							   backgroundColor="#00004F6C" borderVisible="false">
				<s:layout>
					<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle"
										paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0"/>
				</s:layout>
				<mx:Text id="lblfrmTitle" text="FormTitle" 
						 fontFamily="Franklin Gothic Medium" fontSize="14" fontWeight="bold" color="white"/>
			</s:BorderContainer>
			<!--Commenting this out for now.  Will be used only if DJV - David
			mx:VBox id="frmSub" width="100%" height="20" backgroundColor="yellow">
			<mx:Text text="form Title Label" id="lblfrmSubTitle" />
			</mx:VBox-->
			<s:Group id="GG" width="100%" height="100%">
				<mx:Box width="100%" height="100%"
						paddingTop="10"  paddingBottom="10" paddingLeft="10" paddingRight="10" 
						backgroundColor="white"
						click="box1_clickHandler(event)" dragDrop="dragDropHandler(event);"
						dragEnter="dragEnterHandler(event);">
					<ascomponent:rzmvasBroderContainer id="mainParent"  backgroundAlpha="1" width="100%" height="100%"
													   dragEnter="dragEnterHandler(event);"  
													   dragDrop="dragDropHandler(event);"
													   dragOver="mainParent_dragOverHandler(event)"
													   skinClass="th.co.shopsthai.resize.rzmvasBroderContainerSkin"
													   borderColor="YELLOW" borderWeight="2"  
													   bc="0xFFFF00" stockweg="2"
													   >
						<ascomponent:layout>
							<s:VerticalLayout   paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"/>
						</ascomponent:layout>
<!--						<s:DropDownList  maxHeight="60" dataProvider="{testArray}" fontSize="10" id="dd1"  
										 skinClass="flex.utils.spark.resize.ResizableDropDownListSkin" />-->
						
						
					</ascomponent:rzmvasBroderContainer>	

<!--					<s:BorderContainer id="supGG" 
									   width="100%" height="100%"
									   borderVisible="true" borderColor="yellow" borderWeight="2">

					</s:BorderContainer>
-->				</mx:Box>
			</s:Group>
			<s:BorderContainer width="100%" height="24" backgroundColor="#00004F6C" borderVisible="false">
				<s:layout>
					<s:HorizontalLayout verticalAlign="middle"/>
				</s:layout>
				<s:Spacer width="100%"/>
				<!--Commenting this out.  Don't remember what it's for.  David
				mx:CheckBox id="showPassiveGuides" label="Show passive guidelines"
				selected="true"/-->
				<s:ButtonBar height="21"
							 fontFamily="Franklin Gothic Medium" fontSize="12" fontWeight="bold">
					<s:layout>
						<s:ButtonBarHorizontalLayout gap="5" />
					</s:layout>
					<s:dataProvider>
						<s:ArrayList source="[Send,Cancel]" />
					</s:dataProvider>
				</s:ButtonBar>
				<s:Spacer width="10"/>
			</s:BorderContainer>
		</s:BorderContainer>
	</s:BorderContainer>
</s:Group>