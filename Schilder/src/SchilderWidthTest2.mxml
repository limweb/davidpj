<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<!--Remarks:
	1. If 1 line and CS=false, blue 1A
	
	2. If 1 line and CS=true and 1A is empty, resize, unhide 2 and 2A, blue 2A, make 1A the target, show right button which when pressed makes 2A the target, 
	change to left button which makes 1A the target

	3. If 1A is not empty, same but make 2A the target
	
	4. If 2 lines and CS=false and 1A is empty, unhide 2 and 2A and 2B, blue both, make 1A the target, show down button which makes 1B the target, 
	change to right button which makes 2A the target, change to down button which makes 2B the target, change to left button which makes 1A the target
	
	5. If 2 lines to 1 line and 1B ... cs and not cs
	
	6. If 2 lines to 1 line and 1B is not empty, leave 1 as-is and unhide 2 and 2A and 2B
	
	7. If 2 lines to 1 line and current is 
	

	1A is always the starting target
	When set target, make it the current
	Highlight the target (and unhide the previous target)
	If focus into a container, undo should delete elements from the right
	
	
	
	If 1 line and CS and no chars, blue 1A and 2A and give right button
	If 1 line and CS and chars in 1A, unblue 1A and blue 2A and put cursor into right (no button)
	If 2 lines and no CS and no chars, blue all four and give down button 
	If 2 lines and CS and chars in 1A, give 
	
	Rainbow foil with 2 lines:  need to have a different texture for line 1 and line 2 which match up
	
	WHY DO WE NEED TO PASS THE EVENT TYPE?
	-->
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import spark.components.Label;
			import spark.components.VGroup;
			
			[bindable] private var vgap:int = 5;
			protected var LineCount:int;
			protected var CS:Boolean = false;
			//private var NumChildren:uint = Target.numChildren;
			protected var ElementType:String;
			protected var Index:int = 0;
			protected var CenterSymbol:Boolean = false;
			protected var CurrentContainer:String;
			protected var CurrentContainerIsFull:Boolean;
			protected var TargetContainer:String;
			protected var OutlineColor:uint = 0x00ced1;
			protected var CoS1A_RunningLength:int = 0;
			protected var CoS1B_RunningLength:int = 0;
			protected var CoS2A_RunningLength:int = 0;
			protected var CoS2B_RunningLength:int = 0;
			
			protected var CoS2_Exists:Boolean = false;
			
			private function SetLineCount(event:MouseEvent,LC:int):void
			{
				if (LC == 1)
				{
					CoS1B.includeInLayout = false; CoS1B.visible = false;
					if (CoS2_Exists == true)
					{
						CoS2B.includeInLayout = false; CoS2B.visible = false;
					}
					LineCount = 1;
				}
				else if (LC == 2)
				{
					CoS1B.includeInLayout = true; CoS1B.visible = true;
					if (CoS2_Exists == true)
					{
						if (CoS2A.includeInLayout = true && Cos2A.visible = true)
						{
							CoS2B.includeInLayout = true; CoS2B.visible = true;
						}
					}
					LineCount = 2;
				}
			}
			
			private function Full():void
			{
				Alert.show(CurrentContainer + ' is full');
			}
			
			/*Element types:
			LS = Large Symbol
			SS = Small Symbol
			LC = Character
			*/
			
			private function TrimCurrentAndSetTargetContainer(CurrentContainer,TargetContainer):void
			{
				
			}
			
			private function DetermineTargetCoSContainer(ElementType):void
			{
				if (CurrentContainerIsFull == true)
				{
					Full();
				}
				
				if (CurrentContainer == '')
				{
					TargetContainer = 'CoS1A';
				}
				
/*				if (ElementType = 'CS' && CenterSymbol == false)				
				{	
					if (LineCount == 1 && CurrentContainer == 'CoS1A')
					{
						TargetContainer = 'CoS2A';
					}	
					else if (LineCount == 2 && CurrentContainer == 'CoS1B')
					{
						TargetContainer = 'CoS2A'; 
					}
					
					CenterSymbol = true;
				}  */
				
				if (ElementType == 'LS')
				{
					if (LineCount == 2 && CurrentContainer == 'CoS1A')
					{
						TargetContainer = 'CoS2A';
					}
					else
					{
						TargetContainer = CurrentContainer;
					}
				}
/*				else if (LineCount == 2 && (ElementType == 'SS' || ElementType == 'C')) //'SS' Implies linecount = 2
				{
				//
				}  */
				else
				{
					TargetContainer = CurrentContainer;
				}
			}
			
			private function AddElement(ElementType):void
			{
				//We know current container so don't need to make it a parm
				
				DetermineTargetCoSContainer(ElementType);
				
				var ElementLabel:Label = new Label;
				var ElementId:String;
				var parentC:VGroup = new VGroup;
				var parentS:BorderContainer = new BorderContainer;
				var parentD:BorderContainer = new BorderContainer;
				var child:BorderContainer = new BorderContainer;
				var child1:BorderContainer = new BorderContainer;
				var child2:BorderContainer = new BorderContainer;

				ElementId = (TargetContainer + String(Index));

				ElementLabel.text = ElementId;
				
				if (CurrentContainer == '' && TargetContainer == 'CoS1A')
				{
					//Target CoS1A
				}
				else if (CurrentContainer == 'CoS1A' && TargetContainer == 'CoS1B')
				{
					//Unhide CoS1B;
				}
				else if (CurrentContainer == 'CoS1B' && TargetContainer == 'CoS2A')
				{
					//Unhide CoS2
					//Unhide CoS2A
				}
				else if (CurrentContainer == 'CoS2A' && TargetContainer == 'CoS2B')
				{
					//Unhide CoS2B
				}
				else if (CurrentContainer == TargetContainer)
				{
					//Don't need to create parent
				}
				
				if (ElementType == 'LS')
				{
					child.id = ElementId;
					child.width = 50;
					child.percentHeight = 70;
					child.setStyle('borderColor','blue');
					child.addElement(ElementLabel);
					CoS1.addElement(child);
				}
				else if (ElementType == 'TwoLine')
				{
					child.id = ElementId;
					child.width = 50;
					child.percentHeight = 50;
					child.setStyle('borderColor','blue');
					child1.width = child.width;
					child1.percentHeight = child.percentHeight;
					child1.setStyle('borderColor','blue');
					child1.addElement(ElementLabel);
					Index = (Index + 1);
					child2.width = child.width;
					child2.percentHeight = child.percentHeight;
					child2.setStyle('borderColor','blue');	
					child2.addElement(ElementLabel);
					parentC.width = child.width;
					parentC.percentHeight = 70;
					parentC.gap = vgap;
					parentC.addElement(child1);
					parentC.addElement(child2);
					CoS1.addElement(parentC);
				}
				else if (ElementType == 'BigSymbol')
				{
					child.width = 80;
					child.percentHeight = 100;
					child.setStyle('borderColor','green');
					child.addElement(ElementLabel);
					CoS1.addElement(child);
				}
				else if (ElementType == 'TopSymbol')
				{
					child.width = 50;
					child.percentHeight = 50;
					child.setStyle('borderColor','green');
					child.setStyle('borderAlpha', .2);
					child1.width = child.width;
					child1.percentHeight = child.percentHeight;
					child1.setStyle('borderColor','green');
					child1.addElement(ElementLabel);
					Index = (Index + 1);
					child2.width = child.width;
					child2.percentHeight = child.percentHeight;
					child2.setStyle('borderColor','gray');
					child2.addElement(ElementLabel);
					parentC.width = child.width;
					parentC.percentHeight = 70;
					parentC.gap = vgap;
					parentC.addElement(child1);
					parentC.addElement(child2);
					CoS1.addElement(parentC);
				}
				else if (ElementType == 'BottomSymbol')
				{
					child.width = 50;
					child.percentHeight = 50;
					child.setStyle('borderColor','green');
					child.setStyle('borderAlpha', .2);
					child1.width = child.width;
					child1.percentHeight = child.percentHeight;
					child1.setStyle('borderColor','gray');
					child1.addElement(ElementLabel);
					Index = (Index + 1);
					child2.width = child.width;
					child2.percentHeight = child.percentHeight;
					child2.setStyle('borderColor','green');
					child2.addElement(ElementLabel);
					parentC.width = child.width;
					parentC.percentHeight = 70;
					parentC.gap = vgap;
					parentC.addElement(child1);
					parentC.addElement(child2);
					CoS1.addElement(parentC);
				}
				else if (ElementType == 'CS')
				{
					child.width = 80;
					child.percentHeight = 100;
					child.setStyle('borderColor','green');
					child.addElement(ElementLabel);
					parentS.id = 'CoS2'
					parentS.width = child.width;
					parentS.percentHeight = child.percentHeight;
					parentS.setStyle('borderColor','yellow');
					parentD.percentWidth = 100;
					parentD.percentHeight = 100;
					parentD.setStyle('borderColor','blue');
					parentS.addElement(child);
					CoS.addElement(parentS);
					CoS.addElement(parentD);
				}
				
				Index = (Index + 1);
			}
		]]>
	</fx:Script>
	
	<s:BorderContainer width="1000" height="200" borderVisible="true">
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		
		<s:HGroup gap="5" depth="1">
			<s:Button label="1 line" click="SetLineCount(event,1)"/>
			<s:Button label="2 lines" click="SetLineCount(event,2)"/>
			<s:Spacer width="10"/>
			<s:Button label="Character" click="AddElement('TC')"/>
			<s:Button label="Top character" click="AddElement('TC')"/>
			<s:Button label="Bottom character" click="AddElement('BC')"/>
			<s:Spacer width="5"/>
			<s:Button label="Symbol" click="AddElement('S')"/>
			<s:Button label="Top symbol" click="AddElement('TS')"/>
			<s:Button label="Bottom symbol" click="AddElement('BS')"/>
			<s:Button label="Symbol" click="AddElement('S')"/>
			<s:Button label="Top symbol" click="AddElement('TS')"/>
			<s:Button label="Bottom symbol" click="AddElement('BS')"/>
		</s:HGroup>
		
		<s:BorderContainer id="C" depth="2"
						   width="100%" height="100%" verticalCenter="0" horizontalCenter="0" visible="true" includeInLayout="true">
			<s:layout>
				<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle" 
									paddingTop="10" paddingBottom="10" gap="10" clipAndEnableScrolling="true"/>
				</s:layout>
				<s:BorderContainer id="CoS"  borderColor="red"
								   width="100%" height="100%" verticalCenter="0" horizontalCenter="0" visible="true" includeInLayout="true">
					<s:layout>
						<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle" 
											paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" gap="0" clipAndEnableScrolling="true"/>
					</s:layout>
					<s:BorderContainer id="CoS1" borderColor="green"
									   width="100%" height="100%" verticalCenter="0" horizontalCenter="0" visible="true" includeInLayout="true">
						<s:layout>
							<s:VerticalLayout horizontalAlign="center" verticalAlign="middle" gap="5" clipAndEnableScrolling="true"/>
						</s:layout>
						<s:BorderContainer id="CoS1A"
										   width="100%" height="100%" verticalCenter="0" horizontalCenter="0" borderColor="{OutlineColor}" visible="true" includeInLayout="true">
							<s:layout>
								<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle" gap="1" clipAndEnableScrolling="true"/>
							</s:layout>
						</s:BorderContainer>
						<s:BorderContainer id="CoS1B"
										   width="100%" height="100%" verticalCenter="0" horizontalCenter="0" borderColor="{OutlineColor}" visible="true" includeInLayout="true">
							<s:layout>
								<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle" gap="1" clipAndEnableScrolling="true"/>
							</s:layout>
						</s:BorderContainer>
					</s:BorderContainer>
				</s:BorderContainer>
		</s:BorderContainer>
		
		<s:BorderContainer id="Outlines" depth="3">
			<s:Rect id="Box1AOutline"
					x="{CoS1A.x}" y="{CoS1A.y}" width="{CoS1A.width}" height="{CoS1A.height}" alpha="0"
					horizontalCenter="0" verticalCenter="0" visible="true" depth="14">
				<s:stroke>
					<s:SolidColorStroke color="{OutlineColor}" weight="1"/>
				</s:stroke>
			</s:Rect>
			<s:Rect id="CoS1BOutline"
					x="{CoS1B.x}" y="{CoS1B.y}" width="{CoS1B.width}" height="{CoS1B.height}" 
					horizontalCenter="0" verticalCenter="0" visible="{CoS1B.visible}" depth="14">
				<s:stroke>
					<s:SolidColorStroke color="{OutlineColor}" weight="1"/>
				</s:stroke>
			</s:Rect>
			<s:Rect id="CoS2AOutline"
					x="{CoS2A.x}" y="{CoS2A.y}" width="{CoS2A.width}" height="{CoS2A.height}" visible="false"
					horizontalCenter="0" verticalCenter="0" depth="14">
				<s:stroke>
					<s:SolidColorStroke color="{OutlineColor}" weight="1"/>
				</s:stroke>
			</s:Rect>
			<s:Rect id="CoS2BOutline"
					x="{CoS2B.x}" y="{CoS2B.y}" width="{CoS2B.width}" height="{CoS2B.height}" 
					horizontalCenter="0" verticalCenter="0" visible="{CoS2B.visible}" depth="14">
				<s:stroke>
					<s:SolidColorStroke color="{OutlineColor}" weight="1"/>
				</s:stroke>
			</s:Rect>
		</s:BorderContainer>
		
	</s:BorderContainer>
			
</s:Application>
