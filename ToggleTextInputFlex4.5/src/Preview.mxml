<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:components="org.yang.chen.components.*"
			   width="590" height="300" backgroundColor="0xf0f0f0" creationComplete="initApp()"
			   viewSourceURL="srcview/index.html">
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace components "org.yang.chen.components.*";
		
		.default components|ToggleTextInput
		{
			skinClass:ClassReference("org.yang.chen.skins.TTISkin");
		}
		
		.minimalist components|ToggleTextInput
		{
			skinClass:ClassReference("org.yang.chen.skins.TTIMinimalistSkin");
		}
		
		.responsive components|ToggleTextInput
		{
			skinClass:ClassReference("org.yang.chen.skins.TTIResponsiveSkin");
		}
		
		.spark components|ToggleTextInput
		{
			skinClass:ClassReference("org.yang.chen.skins.MySkin");
		}

		s|TextInput
		{
			focusAlpha: 0;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.TitleWindow;
			import spark.events.IndexChangeEvent;
			
			private var helpWindow:TitleWindow; 
			
			protected function initApp():void
			{
				addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
				skinDropDownList.selectedIndex = 2;
				form.styleName = "responsive";
			}
			
			/**
			 * Removes the help window.
			 */
			private function mouseDownHandler(e:MouseEvent):void
			{
				if(focusManager.getFocus() != helpWindow)
					PopUpManager.removePopUp(helpWindow);
			}
			
			/**
			 * Appends a confirm event to the log text area.
			 */
			protected function log(event:Event):void
			{
				switch(event.target)
				{
					case idNumber:
						logArea.appendText("ID number changed.\n");
						break;
					case userName:
						logArea.appendText("User name changed.\n");
						break;
//					case phoneNumber:
//						logArea.appendText("Phone number changed.\n");
//						break;
//					case email:
//						logArea.appendText("Email address changed.\n");
//						break;
				}
			}
			
			/**
			 * Changes skin.
			 */
			protected function skinChangeHandler(event:IndexChangeEvent):void
			{
				reset();
				switch(event.newIndex)
				{
					case 0:
						form.styleName = "default";
						break;
					case 1:
						form.styleName = "minimalist";
						break;
					case 2:
						form.styleName = "responsive";
						break;
					default:
						form.styleName = "spark";
				}
			}
			
			/**
			 * Resets form items and log area.
			 */
			protected function reset():void
			{
				idNumber.text = "10001";
				userName.text = "John Smith";
//				phoneNumber.text = "";
//				email.text = "";
				logArea.text = "";
			}
			
			/**
			 * Shows the help window.
			 */
			protected function openHelpWindow():void
			{
				helpWindow = PopUpManager.createPopUp(this, HelpWindow, false) as TitleWindow;
				helpWindow.isPopUp = false;
				helpWindow.title = "Things to try...";
				PopUpManager.centerPopUp(helpWindow);
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:StringValidator source="{idNumber}" property="text" required="true" requiredFieldError="ID number can't be empty"/>
<!--		<mx:EmailValidator source="{email}" property="text" required="false"
			invalidCharError="Invalid character" invalidDomainError="Invalid domain" invalidIPDomainError="Invalid IP domain"
			invalidPeriodsInDomainError="Invalid periods" missingAtSignError="Missing @ sign" missingPeriodInDomainError="Missing period"
			missingUsernameError="Missing username" tooManyAtSignsError="Too many @ signs"/>
		<mx:PhoneNumberValidator allowedFormatChars="-()" minDigits="8" source="{phoneNumber}" property="text" required="false"
			invalidCharError="Invalid character" wrongLengthError="Please enter at least 8 digits"/>-->
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%">
		<s:SkinnableContainer width="100%" skinClass="ControlPanelSkin">
			<s:HGroup horizontalAlign="center" width="100%" verticalAlign="middle">
				<s:Label text="Skin:" fontWeight="bold"/>
				<s:DropDownList id="skinDropDownList" width="150" selectedIndex="0" change="skinChangeHandler(event)">
					<s:dataProvider>
						<s:ArrayList>
							<fx:String>Default</fx:String>
							<fx:String>Minimalist</fx:String>
							<fx:String>Responsive</fx:String>
							<fx:String>Spark</fx:String>
						</s:ArrayList>
					</s:dataProvider>
				</s:DropDownList>
				<s:Button label="Reset" click="reset()"/>
				<s:Button label="Instructions" click="openHelpWindow()"/>
			</s:HGroup>
		</s:SkinnableContainer>
		
		<s:Group>
			<s:Form styleName="default" left="10" id="form">
				<s:layout>
					<s:FormLayout gap="0"/>
				</s:layout>
				<s:FormItem label="">
					<components:ToggleTextInput id="idNumber" text="10001" addButtonLabel="Add ID Number" confirm="log(event)"/>
				</s:FormItem>
				<s:FormItem label="">
					<components:ToggleTextInput id="userName" text="John Smith" addButtonLabel="Add User Name" confirm="log(event)"/>
				</s:FormItem>
<!--				<s:FormItem label="Phone Number:">
					<components:ToggleTextInput id="phoneNumber" addButtonLabel="Add Number" confirm="log(event)" />
				</s:FormItem>
				<s:FormItem label="Email Address:">
					<components:ToggleTextInput id="email" addButtonLabel="Add Email Address" confirm="log(event)"/>
				</s:FormItem>-->
				
			</s:Form>
		</s:Group>
		<s:Group width="100%" height="100%">
			<s:TextArea id="logArea" editable="false" contentBackgroundColor="0xf3f3f3" 
				left="10" right="10" bottom="10" width="100%" height="100%"/>
		</s:Group>
		
	</s:VGroup>
	
</s:Application>
