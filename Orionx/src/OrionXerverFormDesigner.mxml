<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:model="com.vstyran.transform.model.*"
			   xmlns:component="component.*"
			   xmlns:view="view.*"
			   xmlns:components="david.view.components.*"
			   minWidth="955" minHeight="600" creationComplete="init()"
			   viewSourceURL="srcview/index.html">
	<fx:Declarations>
		
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		mx|DataGrid {
			backgroundColor: #cccccc;
			alternatingItemColors: #cccccc, #cccccc;
			headerColors: #999999, #999999;
			horizontalGridLines: true;
			verticalGridLineColor: #ffffff;
		}
	</fx:Style>
<fx:Script>
	<![CDATA[
		import com.vstyran.transform.consts.GuidelineType;
		import com.vstyran.transform.model.Guideline;
		import com.vstyran.transform.utils.DataUtil;
		
		import david.view.configs.Constants;
		
		import mx.collections.ArrayCollection;
		import mx.core.IVisualElement;
		import mx.core.UIComponent;
		import mx.events.FlexEvent;

		
		[Bindable]	public var compList:ArrayCollection;
		[Bindable]	public var compList2:ArrayCollection;
		[Bindable] 	private var deletedObjects:ArrayCollection = new ArrayCollection();
		[Bindable]	public var updateComplete:Boolean = false;
		public  var selected:String="";
		
		protected function init():void
		{
			compList = new ArrayCollection([
				{icon:"assets/Button.png",list:"Button",obj:1,icon2:"assets/Button.png",detail:"ButtonIR"},
				{icon:"assets/ComboBox.png",list:"ComboBox",obj:3,obj:1,icon2:"assets/ComboBox.png",detail:"ComboBoxIR"},
				{icon:"assets/TextInput.png",list:"TextInput",obj:7,icon2:"assets/TextInput.png",detail:"TextInputIR"},
				{icon:"assets/CheckBox.png",list:"CheckBox",obj:2,obj:1},
				{icon:"assets/DataGrid.png",list:"DataGrid",obj:4},
				{icon:"assets/DateChooser.png",list:"DateChooser",obj:5},
				{icon:"assets/RadioButton.png",list:"RadioButton",obj:6},
				{icon:"assets/TextArea.png",list:"TextArea",obj:8}
			]);
		}
		
		private function updatecompletes(event:FlexEvent):void {
			if(updateComplete){
				vdFormDesign.tool.target = event  as UIComponent;
				vdFormDesign.tool.showPreviewCover = true;
				vdFormDesign.tool.visible = true;
				updateComplete = false;
			}
			vdFormDesign.GG.validateNow();
		}

		protected function updateGuides():void
		{
			var guidelines:Vector.<Guideline> = new Vector.<Guideline>();
			
			for (var i:int = 0; i < vdFormDesign.GG.numElements; i++) 
			{
				var element:IVisualElement = vdFormDesign.GG.getElementAt(i);
				
				if(element is UIComponent && vdFormDesign.tool.target != element)
				{
					
					var box:Rectangle = DataUtil.createData(element as UIComponent).getBoundingBox()();
					
					guidelines.push(new Guideline(GuidelineType.VERTICAL_EDGE, box.x, 3));
					guidelines.push(new Guideline(GuidelineType.VERTICAL_CENTER, box.x+box.width/2, 3));
					guidelines.push(new Guideline(GuidelineType.VERTICAL_EDGE, box.x+box.width, 3));
					
					guidelines.push(new Guideline(GuidelineType.HORIZONTAL_EDGE, box.y, 3));
					guidelines.push(new Guideline(GuidelineType.HORIZONTAL_CENTER, box.y+box.height/2, 3));
					guidelines.push(new Guideline(GuidelineType.HORIZONTAL_EDGE, box.y+box.height, 3));
					
//					if((element as Image).rotation%90 != 0)
//					{
//						var guideLine:Guideline = new Guideline(GuidelineType.ROTATION, (element as Image).rotation, 3);
//						guideLine.userData = element;
//						guidelines.push(guideLine);
//					}
				}
			}
			vdFormDesign.tool.guidelines = guidelines;
		}
		

	]]>
</fx:Script>
	<mx:HDividedBox width="100%" height="100%" horizontalGap="20">
		<components:FormDeisgn id="vdFormDesign" minWidth="{Constants.formMinWidth}"/>
		<components:ControlDesign id="vdControlDesign" width="350"/>
		<mx:VBox width="0" height="100%">
			
		</mx:VBox>
	</mx:HDividedBox>
</s:Application>
